{
	// Place your lobster_proj workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"constructor": {
		"scope": "lobster",
		"prefix": "constructor",
		"body": [
			"constructor ${1:class}(${2:args}):",
			"\t$3"
		],
		"description": "basic constructor"
	},
	"operator":{
		"scope": "lobster",
		"prefix": "operator",
		"body":[
			"def operator${1:<symb>}(${2:args})->${3:type}:",
			"\t$4"
		],
		"description": "operator overloading"
	},

	"fast_print":{
		"scope": "lobster",
		"prefix": "p",
		"body":[
            "print($1,\"$1\")"
		],
		"description": "print variable"
	},
    //----


    "print": {
        "scope": "lobster",
        "prefix": "print",
        "body": ["print(${1:x})"],
        "description": "print(x:string) \n output any value to the console (with linefeed)."
    },
    
    "string": {
        "scope": "lobster",
        "prefix": "string",
        "body": ["string(${1:x})"],
        "description": "string(x:string) -> string \n convert any value to string"
    },
    
    "set_print_depth": {
        "scope": "lobster",
        "prefix": "set_print_depth",
        "body": ["set_print_depth(${1:depth})"],
        "description": "set_print_depth(depth:int) -> int \n for printing / string conversion: sets max vectors/objects recursion depth (default 10), returns old value"
    },
    
    "set_print_length": {
        "scope": "lobster",
        "prefix": "set_print_length",
        "body": ["set_print_length(${1:len})"],
        "description": "set_print_length(len:int) -> int \n for printing / string conversion: sets max string length (default 100000), returns old value"
    },
    
    "set_print_quoted": {
        "scope": "lobster",
        "prefix": "set_print_quoted",
        "body": ["set_print_quoted(${1:quoted})"],
        "description": "set_print_quoted(quoted:bool) -> int \n for printing / string conversion: if the top level value is a string, whether to convert it with escape codes and quotes (default false), returns old value"
    },
    
    "set_print_decimals": {
        "scope": "lobster",
        "prefix": "set_print_decimals",
        "body": ["set_print_decimals(${1:decimals})"],
        "description": "set_print_decimals(decimals:int) -> int \n for printing / string conversion: number of decimals for any floating point output (default -1, meaning all), returns old value"
    },
    
    "set_print_indent": {
        "scope": "lobster",
        "prefix": "set_print_indent",
        "body": ["set_print_indent(${1:spaces})"],
        "description": "set_print_indent(spaces:int) -> int \n for printing / string conversion: number of spaces to indent with. default is 0: no indent / no multi-line, returns old value"
    },
    
    "get_line": {
        "scope": "lobster",
        "prefix": "get_line",
        "body": ["get_line(${1:prefix})"],
        "description": "get_line(prefix:string) -> string \n reads a string from the console if possible (followed by enter). Prefix will be printed before the input"
    },
    
    "append": {
        "scope": "lobster",
        "prefix": "append",
        "body": ["append(${1:xs}, ${2:ys})"],
        "description": "append(xs:[any], ys:[any]) -> [any] \n creates a new vector by appending all elements of 2 input vectors"
    },
    
    "append_into": {
        "scope": "lobster",
        "prefix": "append_into",
        "body": ["append_into(${1:dest}, ${2:src})"],
        "description": "append_into(dest:[any], src:[any]) -> [any] \n appends all elements of the second vector into the first"
    },
    
    "vector_capacity": {
        "scope": "lobster",
        "prefix": "vector_capacity",
        "body": ["vector_capacity(${1:xs}, ${2:len})"],
        "description": "vector_capacity(xs:[any], len:int) -> [any] \n ensures the vector capacity (number of elements it can contain before re-allocating) is at least \"len\". Does not actually add (or remove) elements. This function is just for efficiency in the case the amount of \"push\" operations is known. returns original vector."
    },
    
    "length": {
        "scope": "lobster",
        "prefix": "length",
        "body": ["length(${1:x})"],
        "description": "length(x:int) -> int \n length of int (identity function, useful in combination with string/vector version)"
    },
    
    "length": {
        "scope": "lobster",
        "prefix": "length",
        "body": ["length(${1:s})"],
        "description": "length(s:string) -> int \n length of string"
    },
    
    "length": {
        "scope": "lobster",
        "prefix": "length",
        "body": ["length(${1:xs})"],
        "description": "length(xs:[any]) -> int \n length of vector"
    },
    
    "equal": {
        "scope": "lobster",
        "prefix": "equal",
        "body": ["equal(a, b) -> int"],
        "description": "equal(a, b) -> int \n structural equality between any two values (recurses into vectors/objects, unlike == which is only true for vectors/objects if they are the same object)"
    },
    
    "push": {
        "scope": "lobster",
        "prefix": "push",
        "body": ["push(${1:xs})"],
        "description": "push(xs:[any], x) -> [any] \n appends one element to a vector, returns existing vector"
    },
    
    "pop": {
        "scope": "lobster",
        "prefix": "pop",
        "body": ["pop(${1:xs})"],
        "description": "pop(xs:[any]) -> any \n removes last element from vector and returns it"
    },
    
    "top": {
        "scope": "lobster",
        "prefix": "top",
        "body": ["top(${1:xs})"],
        "description": "top(xs:[any]) -> any \n returns last element from vector"
    },
    
    "insert": {
        "scope": "lobster",
        "prefix": "insert",
        "body": ["insert(${1:xs}, ${2:i})"],
        "description": "insert(xs:[any], i:int, x) -> [any] \n inserts a value into a vector at index i, existing elements shift upward, returns original vector"
    },
    
    "remove": {
        "scope": "lobster",
        "prefix": "remove",
        "body": ["remove(${1:xs}, ${2:i})"],
        "description": "remove(xs:[any], i:int) -> any \n remove element at index i, following elements shift down. returns the element removed."
    },
    
    "remove_range": {
        "scope": "lobster",
        "prefix": "remove_range",
        "body": ["remove_range(${1:xs}, ${2:i}, ${3:n})"],
        "description": "remove_range(xs:[any], i:int, n:int) \n remove n elements at index i, following elements shift down."
    },
    
    "remove_obj": {
        "scope": "lobster",
        "prefix": "remove_obj",
        "body": ["remove_obj(${1:xs})"],
        "description": "remove_obj(xs:[any], obj) -> any \n remove all elements equal to obj (==), returns obj."
    },
    
    "binary_search": {
        "scope": "lobster",
        "prefix": "binary_search",
        "body": ["binary_search(${1:xs}, ${2:key})"],
        "description": "binary_search(xs:[int], key:int) -> int, int \n does a binary search for key in a sorted vector, returns as first return value how many matches were found, and as second the index in the array where the matches start (so you can read them, overwrite them, or remove them), or if none found, where the key could be inserted such that the vector stays sorted. This overload is for int vectors and keys."
    },
    
    "binary_search": {
        "scope": "lobster",
        "prefix": "binary_search",
        "body": ["binary_search(${1:xs}, ${2:key})"],
        "description": "binary_search(xs:[float], key:float) -> int, int \n float version."
    },
    
    "binary_search": {
        "scope": "lobster",
        "prefix": "binary_search",
        "body": ["binary_search(${1:xs}, ${2:key})"],
        "description": "binary_search(xs:[string], key:string) -> int, int \n string version."
    },
    
    "binary_search_object": {
        "scope": "lobster",
        "prefix": "binary_search_object",
        "body": ["binary_search_object(${1:xs})"],
        "description": "binary_search_object(xs:[any], key) -> int, int \n object version. compares by reference rather than contents."
    },
    
    "copy": {
        "scope": "lobster",
        "prefix": "copy",
        "body": ["copy(x) -> any"],
        "description": "copy(x) -> any \n makes a shallow copy of any object/vector/string."
    },
    
    "deepcopy": {
        "scope": "lobster",
        "prefix": "deepcopy",
        "body": ["deepcopy(x, ${1:depth})"],
        "description": "deepcopy(x, depth:int) -> any \n makes a deep copy of any object/vector/string. DAGs become trees, and cycles will clone until it reach the given depth. depth == 1 would do the same as copy."
    },
    
    "slice": {
        "scope": "lobster",
        "prefix": "slice",
        "body": ["slice(${1:xs}, ${2:start}, ${3:size})"],
        "description": "slice(xs:[any], start:int, size:int) -> [any] \n returns a sub-vector of size elements from index start. size can be negative to indicate the rest of the vector."
    },
    
    "any": {
        "scope": "lobster",
        "prefix": "any",
        "body": ["any(${1:xs})"],
        "description": "any(xs:[any]) -> int \n returns whether any elements of the vector are true values"
    },
    
    "any": {
        "scope": "lobster",
        "prefix": "any",
        "body": ["any(${1:xs})"],
        "description": "any(xs:vec_i) -> int \n returns whether any elements of the numeric struct are true values"
    },
    
    "all": {
        "scope": "lobster",
        "prefix": "all",
        "body": ["all(${1:xs})"],
        "description": "all(xs:[any]) -> int \n returns whether all elements of the vector are true values"
    },
    
    "all": {
        "scope": "lobster",
        "prefix": "all",
        "body": ["all(${1:xs})"],
        "description": "all(xs:vec_i) -> int \n returns whether all elements of the numeric struct are true values"
    },
    
    "substring": {
        "scope": "lobster",
        "prefix": "substring",
        "body": ["substring(${1:s}, ${2:start}, ${3:size})"],
        "description": "substring(s:string, start:int, size:int) -> string \n returns a substring of size characters from index start. size can be negative to indicate the rest of the string."
    },
    
    "find_string": {
        "scope": "lobster",
        "prefix": "find_string",
        "body": ["find_string(${1:s}, ${2:substr}, ${3:offset})"],
        "description": "find_string(s:string, substr:string, offset:int = 0) -> int \n finds the index at which substr first appears, or -1 if none. optionally start at a position other than 0"
    },
    
    "find_string_reverse": {
        "scope": "lobster",
        "prefix": "find_string_reverse",
        "body": ["find_string_reverse(${1:s}, ${2:substr}, ${3:offset})"],
        "description": "find_string_reverse(s:string, substr:string, offset:int = 0) -> int \n finds the index at which substr first appears when searching from the end, or -1 if none. optionally start at a position other than the end of the string"
    },
    
    "replace_string": {
        "scope": "lobster",
        "prefix": "replace_string",
        "body": ["replace_string(${1:s}, ${2:a}, ${3:b}, ${4:count})"],
        "description": "replace_string(s:string, a:string, b:string, count:int = 0) -> string \n returns a copy of s where all occurrences of a have been replaced with b. if a is empty, no replacements are made. if count is specified, makes at most that many replacements"
    },
    
    "string_to_int": {
        "scope": "lobster",
        "prefix": "string_to_int",
        "body": ["string_to_int(${1:s}, ${2:base})"],
        "description": "string_to_int(s:string, base:int = 0) -> int, int \n converts a string to an int given the base (2..36, e.g. 16 for hex, default is 10).returns 0 if no numeric data could be parsed; second return value is true if allcharacters of the string were parsed."
    },
    
    "string_to_float": {
        "scope": "lobster",
        "prefix": "string_to_float",
        "body": ["string_to_float(${1:s})"],
        "description": "string_to_float(s:string) -> float, int \n converts a string to a float. returns 0.0 if no numeric data could be parsed;second return value is true if all characters of the string were parsed."
    },
    
    "tokenize": {
        "scope": "lobster",
        "prefix": "tokenize",
        "body": ["tokenize(${1:s}, ${2:delimiters}, ${3:whitespace}, ${4:dividing})"],
        "description": "tokenize(s:string, delimiters:string, whitespace:string, dividing:int = 0) -> [string] \n splits a string into a vector of strings, by splitting into segments upon each dividing or terminating delimiter. Segments are stripped of leading and trailing whitespace. Example: "; A ; B C;; " becomes [ "", "A", "B C", "" ] with ";" as delimiter and " " as whitespace. If dividing was true, there would be a 5th empty string element."
    },
    
    "unicode_to_string": {
        "scope": "lobster",
        "prefix": "unicode_to_string",
        "body": ["unicode_to_string(${1:us})"],
        "description": "unicode_to_string(us:[int]) -> string \n converts a vector of ints representing unicode values to a UTF-8 string."
    },
    
    "string_to_unicode": {
        "scope": "lobster",
        "prefix": "string_to_unicode",
        "body": ["string_to_unicode(${1:s})"],
        "description": "string_to_unicode(s:string) -> [int], int \n converts a UTF-8 string into a vector of unicode values. second return value is false if there was a decoding error, and the vector will only contain the characters up to the error"
    },
    
    "number_to_string": {
        "scope": "lobster",
        "prefix": "number_to_string",
        "body": ["number_to_string(${1:number}, ${2:base}, ${3:minchars})"],
        "description": "number_to_string(number:int, base:int, minchars:int) -> string \n converts the (unsigned version) of the input integer number to a string given the base (2..36, e.g. 16 for hex) and outputting a minimum of characters (padding with 0)."
    },
    
    "lowercase": {
        "scope": "lobster",
        "prefix": "lowercase",
        "body": ["lowercase(${1:s})"],
        "description": "lowercase(s:string) -> string \n converts a UTF-8 string from any case to lower case, affecting only A-Z"
    },
    
    "uppercase": {
        "scope": "lobster",
        "prefix": "uppercase",
        "body": ["uppercase(${1:s})"],
        "description": "uppercase(s:string) -> string \n converts a UTF-8 string from any case to upper case, affecting only a-z"
    },
    
    "escape_string": {
        "scope": "lobster",
        "prefix": "escape_string",
        "body": ["escape_string(${1:s}, ${2:set}, ${3:prefix}, ${4:postfix})"],
        "description": "escape_string(s:string, set:string, prefix:string, postfix:string) -> string \n prefixes & postfixes any occurrences or characters in set in string s"
    },
    
    "concat_string": {
        "scope": "lobster",
        "prefix": "concat_string",
        "body": ["concat_string(${1:v}, ${2:sep})"],
        "description": "concat_string(v:[string], sep:string) -> string \n concatenates all elements of the string vector, separated with sep."
    },
    
    "repeat_string": {
        "scope": "lobster",
        "prefix": "repeat_string",
        "body": ["repeat_string(${1:s}, ${2:n})"],
        "description": "repeat_string(s:string, n:int) -> string \n returns a string consisting of n copies of the input string."
    },
    
    "pow": {
        "scope": "lobster",
        "prefix": "pow",
        "body": ["pow(${1:a}, ${2:b})"],
        "description": "pow(a:int, b:int) -> int \n a raised to the power of b, for integers, using exponentiation by squaring"
    },
    
    "pow": {
        "scope": "lobster",
        "prefix": "pow",
        "body": ["pow(${1:a}, ${2:b})"],
        "description": "pow(a:float, b:float) -> float \n a raised to the power of b"
    },
    
    "pow": {
        "scope": "lobster",
        "prefix": "pow",
        "body": ["pow(${1:a}, ${2:b})"],
        "description": "pow(a:vec_f, b:float) -> vec_f \n vector elements raised to the power of b"
    },
    
    "log": {
        "scope": "lobster",
        "prefix": "log",
        "body": ["log(${1:a})"],
        "description": "log(a:float) -> float \n natural logaritm of a"
    },
    
    "log2": {
        "scope": "lobster",
        "prefix": "log2",
        "body": ["log2(${1:a})"],
        "description": "log2(a:float) -> float \n base 2 logaritm of a"
    },
    
    "sqrt": {
        "scope": "lobster",
        "prefix": "sqrt",
        "body": ["sqrt(${1:f})"],
        "description": "sqrt(f:float) -> float \n square root"
    },
    
    "ceiling": {
        "scope": "lobster",
        "prefix": "ceiling",
        "body": ["ceiling(${1:f})"],
        "description": "ceiling(f:float) -> int \n the nearest int >= f"
    },
    
    "ceiling": {
        "scope": "lobster",
        "prefix": "ceiling",
        "body": ["ceiling(${1:v})"],
        "description": "ceiling(v:vec_f) -> vec_i \n the nearest ints >= each component of v"
    },
    
    "floor": {
        "scope": "lobster",
        "prefix": "floor",
        "body": ["floor(${1:f})"],
        "description": "floor(f:float) -> int \n the nearest int <= f"
    },
    
    "floor": {
        "scope": "lobster",
        "prefix": "floor",
        "body": ["floor(${1:v})"],
        "description": "floor(v:vec_f) -> vec_i \n the nearest ints <= each component of v"
    },
    
    "int": {
        "scope": "lobster",
        "prefix": "int",
        "body": ["int(${1:f})"],
        "description": "int(f:float) -> int \n converts a float to an int by dropping the fraction"
    },
    
    "int": {
        "scope": "lobster",
        "prefix": "int",
        "body": ["int(${1:v})"],
        "description": "int(v:vec_f) -> vec_i \n converts a vector of floats to ints by dropping the fraction"
    },
    
    "round": {
        "scope": "lobster",
        "prefix": "round",
        "body": ["round(${1:f})"],
        "description": "round(f:float) -> int \n converts a float to the closest int"
    },
    
    "round": {
        "scope": "lobster",
        "prefix": "round",
        "body": ["round(${1:v})"],
        "description": "round(v:vec_f) -> vec_i \n converts a vector of floats to the closest ints"
    },
    
    "fraction": {
        "scope": "lobster",
        "prefix": "fraction",
        "body": ["fraction(${1:f})"],
        "description": "fraction(f:float) -> float \n returns the fractional part of a float: short for f - floor(f)"
    },
    
    "fraction": {
        "scope": "lobster",
        "prefix": "fraction",
        "body": ["fraction(${1:v})"],
        "description": "fraction(v:vec_f) -> vec_f \n returns the fractional part of a vector of floats"
    },
    
    "float": {
        "scope": "lobster",
        "prefix": "float",
        "body": ["float(${1:i})"],
        "description": "float(i:int) -> float \n converts an int to float"
    },
    
    "float": {
        "scope": "lobster",
        "prefix": "float",
        "body": ["float(${1:v})"],
        "description": "float(v:vec_i) -> vec_f \n converts a vector of ints to floats"
    },
    
    "sin": {
        "scope": "lobster",
        "prefix": "sin",
        "body": ["sin(${1:angle})"],
        "description": "sin(angle:float) -> float \n the y coordinate of the normalized vector indicated by angle (in degrees)"
    },
    
    "sin": {
        "scope": "lobster",
        "prefix": "sin",
        "body": ["sin(${1:angle})"],
        "description": "sin(angle:vec_f) -> vec_f \n the y coordinates of the normalized vector indicated by the angles (in degrees)"
    },
    
    "cos": {
        "scope": "lobster",
        "prefix": "cos",
        "body": ["cos(${1:angle})"],
        "description": "cos(angle:float) -> float \n the x coordinate of the normalized vector indicated by angle (in degrees)"
    },
    
    "cos": {
        "scope": "lobster",
        "prefix": "cos",
        "body": ["cos(${1:angle})"],
        "description": "cos(angle:vec_f) -> vec_f \n the x coordinates of the normalized vector indicated by the angles (in degrees)"
    },
    
    "tan": {
        "scope": "lobster",
        "prefix": "tan",
        "body": ["tan(${1:angle})"],
        "description": "tan(angle:float) -> float \n the tangent of an angle (in degrees)"
    },
    
    "tan": {
        "scope": "lobster",
        "prefix": "tan",
        "body": ["tan(${1:angle})"],
        "description": "tan(angle:vec_f) -> vec_f \n the tangents of the angles (in degrees)"
    },
    
    "sincos": {
        "scope": "lobster",
        "prefix": "sincos",
        "body": ["sincos(${1:angle})"],
        "description": "sincos(angle:float) -> float2 \n the normalized vector indicated by angle (in degrees), same as xy { cos(angle), sin(angle) }"
    },
    
    "asin": {
        "scope": "lobster",
        "prefix": "asin",
        "body": ["asin(${1:y})"],
        "description": "asin(y:float) -> float \n the angle (in degrees) indicated by the y coordinate projected to the unit circle"
    },
    
    "acos": {
        "scope": "lobster",
        "prefix": "acos",
        "body": ["acos(${1:x})"],
        "description": "acos(x:float) -> float \n the angle (in degrees) indicated by the x coordinate projected to the unit circle"
    },
    
    "atan": {
        "scope": "lobster",
        "prefix": "atan",
        "body": ["atan(${1:x})"],
        "description": "atan(x:float) -> float \n the angle (in degrees) indicated by the y coordinate of the tangent projected to the unit circle"
    },
    
    "radians": {
        "scope": "lobster",
        "prefix": "radians",
        "body": ["radians(${1:angle})"],
        "description": "radians(angle:float) -> float \n converts an angle in degrees to radians"
    },
    
    "degrees": {
        "scope": "lobster",
        "prefix": "degrees",
        "body": ["degrees(${1:angle})"],
        "description": "degrees(angle:float) -> float \n converts an angle in radians to degrees"
    },
    
    "atan2": {
        "scope": "lobster",
        "prefix": "atan2",
        "body": ["atan2(${1:vec})"],
        "description": "atan2(vec:float2) -> float \n the angle (in degrees) corresponding to a normalized 2D vector"
    },
    
    "radians": {
        "scope": "lobster",
        "prefix": "radians",
        "body": ["radians(${1:angle})"],
        "description": "radians(angle:float) -> float \n converts an angle in degrees to radians"
    },
    
    "degrees": {
        "scope": "lobster",
        "prefix": "degrees",
        "body": ["degrees(${1:angle})"],
        "description": "degrees(angle:float) -> float \n converts an angle in radians to degrees"
    },
    
    "normalize": {
        "scope": "lobster",
        "prefix": "normalize",
        "body": ["normalize(${1:vec})"],
        "description": "normalize(vec:vec_f) -> vec_f \n returns a vector of unit length"
    },
    
    "dot": {
        "scope": "lobster",
        "prefix": "dot",
        "body": ["dot(${1:a}, ${2:b})"],
        "description": "dot(a:vec_f, b:vec_f) -> float \n the length of vector a when projected onto b (or vice versa)"
    },
    
    "magnitude": {
        "scope": "lobster",
        "prefix": "magnitude",
        "body": ["magnitude(${1:v})"],
        "description": "magnitude(v:vec_f) -> float \n the geometric length of a vector"
    },
    
    "magnitude_squared": {
        "scope": "lobster",
        "prefix": "magnitude_squared",
        "body": ["magnitude_squared(${1:v})"],
        "description": "magnitude_squared(v:vec_f) -> float \n the geometric length of a vector squared"
    },
    
    "magnitude_squared": {
        "scope": "lobster",
        "prefix": "magnitude_squared",
        "body": ["magnitude_squared(${1:v})"],
        "description": "magnitude_squared(v:vec_i) -> int \n the geometric length of a vector squared"
    },
    
    "manhattan": {
        "scope": "lobster",
        "prefix": "manhattan",
        "body": ["manhattan(${1:v})"],
        "description": "manhattan(v:vec_i) -> int \n the manhattan distance of a vector"
    },
    
    "cross": {
        "scope": "lobster",
        "prefix": "cross",
        "body": ["cross(${1:a}, ${2:b})"],
        "description": "cross(a:float3, b:float3) -> float3 \n a perpendicular vector to the 2D plane defined by a and b (swap a and b for its inverse)"
    },
    
    "volume": {
        "scope": "lobster",
        "prefix": "volume",
        "body": ["volume(${1:v})"],
        "description": "volume(v:vec_f) -> float \n the volume of the area spanned by the vector"
    },
    
    "volume": {
        "scope": "lobster",
        "prefix": "volume",
        "body": ["volume(${1:v})"],
        "description": "volume(v:vec_i) -> int \n the volume of the area spanned by the vector"
    },
    
    "rnd": {
        "scope": "lobster",
        "prefix": "rnd",
        "body": ["rnd(${1:max})"],
        "description": "rnd(max:int) -> int \n a random value [0..max)."
    },
    
    "rnd": {
        "scope": "lobster",
        "prefix": "rnd",
        "body": ["rnd(${1:max})"],
        "description": "rnd(max:vec_i) -> vec_i \n a random vector within the range of an input vector."
    },
    
    "rnd_float": {
        "scope": "lobster",
        "prefix": "rnd_float",
        "body": ["rnd_float() -> float"],
        "description": "rnd_float() -> float \n a random float [0..1)"
    },
    
    "rnd_gaussian": {
        "scope": "lobster",
        "prefix": "rnd_gaussian",
        "body": ["rnd_gaussian() -> float"],
        "description": "rnd_gaussian() -> float \n a random float in a gaussian distribution with mean 0 and stddev 1"
    },
    
    "rnd_seed": {
        "scope": "lobster",
        "prefix": "rnd_seed",
        "body": ["rnd_seed(${1:seed})"],
        "description": "rnd_seed(seed:int) \n explicitly set a random seed for reproducable randomness"
    },
    
    "rndm": {
        "scope": "lobster",
        "prefix": "rndm",
        "body": ["rndm(${1:max})"],
        "description": "rndm(max:int) -> int \n deprecated: old mersenne twister version of the above for backwards compat."
    },
    
    "rndm_seed": {
        "scope": "lobster",
        "prefix": "rndm_seed",
        "body": ["rndm_seed(${1:seed})"],
        "description": "rndm_seed(seed:int) \n deprecated: old mersenne twister version of the above for backwards compat."
    },
    
    "div": {
        "scope": "lobster",
        "prefix": "div",
        "body": ["div(${1:a}, ${2:b})"],
        "description": "div(a:int, b:int) -> float \n forces two ints to be divided as floats"
    },
    
    "clamp": {
        "scope": "lobster",
        "prefix": "clamp",
        "body": ["clamp(${1:x}, ${2:min}, ${3:max})"],
        "description": "clamp(x:int, min:int, max:int) -> int \n forces an integer to be in the range between min and max (inclusive)"
    },
    
    "clamp": {
        "scope": "lobster",
        "prefix": "clamp",
        "body": ["clamp(${1:x}, ${2:min}, ${3:max})"],
        "description": "clamp(x:float, min:float, max:float) -> float \n forces a float to be in the range between min and max (inclusive)"
    },
    
    "clamp": {
        "scope": "lobster",
        "prefix": "clamp",
        "body": ["clamp(${1:x}, ${2:min}, ${3:max})"],
        "description": "clamp(x:vec_i, min:vec_i, max:vec_i) -> vec_i \n forces an integer vector to be in the range between min and max (inclusive)"
    },
    
    "clamp": {
        "scope": "lobster",
        "prefix": "clamp",
        "body": ["clamp(${1:x}, ${2:min}, ${3:max})"],
        "description": "clamp(x:vec_f, min:vec_f, max:vec_f) -> vec_f \n forces a float vector to be in the range between min and max (inclusive)"
    },
    
    "in_range": {
        "scope": "lobster",
        "prefix": "in_range",
        "body": ["in_range(${1:x}, ${2:range}, ${3:bias})"],
        "description": "in_range(x:int, range:int, bias:int = 0) -> int \n checks if an integer is >= bias and < bias + range. Bias defaults to 0."
    },
    
    "in_range": {
        "scope": "lobster",
        "prefix": "in_range",
        "body": ["in_range(${1:x}, ${2:range}, ${3:bias})"],
        "description": "in_range(x:float, range:float, bias:float = 0.000000) -> int \n checks if a float is >= bias and < bias + range. Bias defaults to 0."
    },
    
    "in_range": {
        "scope": "lobster",
        "prefix": "in_range",
        "body": ["in_range(${1:x}, ${2:range}, ${3:bias})"],
        "description": "in_range(x:int2, range:int2, bias:int2 = nil) -> int \n checks if a 2d integer vector is >= bias and < bias + range. Bias defaults to 0."
    },
    
    "in_range": {
        "scope": "lobster",
        "prefix": "in_range",
        "body": ["in_range(${1:x}, ${2:range}, ${3:bias})"],
        "description": "in_range(x:int3, range:int3, bias:int3 = nil) -> int \n checks if a 3d integer vector is >= bias and < bias + range. Bias defaults to 0."
    },
    
    "in_range": {
        "scope": "lobster",
        "prefix": "in_range",
        "body": ["in_range(${1:x}, ${2:range}, ${3:bias})"],
        "description": "in_range(x:float2, range:float2, bias:float2 = nil) -> int \n checks if a 2d float vector is >= bias and < bias + range. Bias defaults to 0."
    },
    
    "in_range": {
        "scope": "lobster",
        "prefix": "in_range",
        "body": ["in_range(${1:x}, ${2:range}, ${3:bias})"],
        "description": "in_range(x:float3, range:float3, bias:float3 = nil) -> int \n checks if a 2d float vector is >= bias and < bias + range. Bias defaults to 0."
    },
    
    "abs": {
        "scope": "lobster",
        "prefix": "abs",
        "body": ["abs(${1:x})"],
        "description": "abs(x:int) -> int \n absolute value of an integer"
    },
    
    "abs": {
        "scope": "lobster",
        "prefix": "abs",
        "body": ["abs(${1:x})"],
        "description": "abs(x:float) -> float \n absolute value of a float"
    },
    
    "abs": {
        "scope": "lobster",
        "prefix": "abs",
        "body": ["abs(${1:x})"],
        "description": "abs(x:vec_i) -> vec_i \n absolute value of an int vector"
    },
    
    "abs": {
        "scope": "lobster",
        "prefix": "abs",
        "body": ["abs(${1:x})"],
        "description": "abs(x:vec_f) -> vec_f \n absolute value of a float vector"
    },
    
    "sign": {
        "scope": "lobster",
        "prefix": "sign",
        "body": ["sign(${1:x})"],
        "description": "sign(x:int) -> int \n sign (-1, 0, 1) of an integer"
    },
    
    "sign": {
        "scope": "lobster",
        "prefix": "sign",
        "body": ["sign(${1:x})"],
        "description": "sign(x:float) -> int \n sign (-1, 0, 1) of a float"
    },
    
    "sign": {
        "scope": "lobster",
        "prefix": "sign",
        "body": ["sign(${1:x})"],
        "description": "sign(x:vec_i) -> vec_i \n signs of an int vector"
    },
    
    "sign": {
        "scope": "lobster",
        "prefix": "sign",
        "body": ["sign(${1:x})"],
        "description": "sign(x:vec_f) -> vec_i \n signs of a float vector"
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:x}, ${2:y})"],
        "description": "min(x:int, y:int) -> int \n smallest of 2 integers."
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:x}, ${2:y})"],
        "description": "min(x:float, y:float) -> float \n smallest of 2 floats."
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:x}, ${2:y})"],
        "description": "min(x:vec_i, y:vec_i) -> vec_i \n smallest components of 2 int vectors"
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:x}, ${2:y})"],
        "description": "min(x:vec_f, y:vec_f) -> vec_f \n smallest components of 2 float vectors"
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:v})"],
        "description": "min(v:vec_i) -> int \n smallest component of a int vector."
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:v})"],
        "description": "min(v:vec_f) -> float \n smallest component of a float vector."
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:v})"],
        "description": "min(v:[int]) -> int \n smallest component of a int vector, or INT_MAX if length 0."
    },
    
    "min": {
        "scope": "lobster",
        "prefix": "min",
        "body": ["min(${1:v})"],
        "description": "min(v:[float]) -> float \n smallest component of a float vector, or FLT_MAX if length 0."
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:x}, ${2:y})"],
        "description": "max(x:int, y:int) -> int \n largest of 2 integers."
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:x}, ${2:y})"],
        "description": "max(x:float, y:float) -> float \n largest of 2 floats."
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:x}, ${2:y})"],
        "description": "max(x:vec_i, y:vec_i) -> vec_i \n largest components of 2 int vectors"
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:x}, ${2:y})"],
        "description": "max(x:vec_f, y:vec_f) -> vec_f \n largest components of 2 float vectors"
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:v})"],
        "description": "max(v:vec_i) -> int \n largest component of a int vector."
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:v})"],
        "description": "max(v:vec_f) -> float \n largest component of a float vector."
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:v})"],
        "description": "max(v:[int]) -> int \n largest component of a int vector, or INT_MIN if length 0."
    },
    
    "max": {
        "scope": "lobster",
        "prefix": "max",
        "body": ["max(${1:v})"],
        "description": "max(v:[float]) -> float \n largest component of a float vector, or FLT_MIN if length 0."
    },
    
    "lerp": {
        "scope": "lobster",
        "prefix": "lerp",
        "body": ["lerp(${1:x}, ${2:y}, ${3:f})"],
        "description": "lerp(x:float, y:float, f:float) -> float \n linearly interpolates between x and y with factor f [0..1]"
    },
    
    "lerp": {
        "scope": "lobster",
        "prefix": "lerp",
        "body": ["lerp(${1:a}, ${2:b}, ${3:f})"],
        "description": "lerp(a:vec_f, b:vec_f, f:float) -> vec_f \n linearly interpolates between a and b vectors with factor f [0..1]"
    },
    
    "spherical_lerp": {
        "scope": "lobster",
        "prefix": "spherical_lerp",
        "body": ["spherical_lerp(${1:a}, ${2:b}, ${3:f})"],
        "description": "spherical_lerp(a:float4, b:float4, f:float) -> float4 \n spherically interpolates between a and b quaternions with factor f [0..1]"
    },
    
    "smoothmin": {
        "scope": "lobster",
        "prefix": "smoothmin",
        "body": ["smoothmin(${1:x}, ${2:y}, ${3:k})"],
        "description": "smoothmin(x:float, y:float, k:float) -> float \n k is the influence range"
    },
    
    "smoothstep": {
        "scope": "lobster",
        "prefix": "smoothstep",
        "body": ["smoothstep(${1:x})"],
        "description": "smoothstep(x:float) -> float \n input must be in range 0..1, https://en.wikipedia.org/wiki/Smoothstep"
    },
    
    "smoothstep": {
        "scope": "lobster",
        "prefix": "smoothstep",
        "body": ["smoothstep(${1:a}, ${2:b}, ${3:f})"],
        "description": "smoothstep(a:float, b:float, f:float) -> float \n hermite interpolation between a and b by f [0..1], https://registry.khronos.org/OpenGL-Refpages/gl4/html/smoothstep.xhtml"
    },
    
    "smootherstep": {
        "scope": "lobster",
        "prefix": "smootherstep",
        "body": ["smootherstep(${1:x})"],
        "description": "smootherstep(x:float) -> float \n input must be in range 0..1, https://en.wikipedia.org/wiki/Smoothstep"
    },
    
    "cardinal_spline": {
        "scope": "lobster",
        "prefix": "cardinal_spline",
        "body": ["cardinal_spline(${1:z}, ${2:a}, ${3:b}, ${4:c}, ${5:f}, ${6:tension})"],
        "description": "cardinal_spline(z:vec_f, a:vec_f, b:vec_f, c:vec_f, f:float, tension:float) -> vec_f \n computes the position between a and b with factor f [0..1], using z (before a) and c (after b) to form a cardinal spline (tension at 0.5 is a good default)"
    },
    
    "line_intersect": {
        "scope": "lobster",
        "prefix": "line_intersect",
        "body": ["line_intersect(${1:line1a}, ${2:line1b}, ${3:line2a}, ${4:line2b})"],
        "description": "line_intersect(line1a:float2, line1b:float2, line2a:float2, line2b:float2) -> int, float2 \n computes if there is an intersection point between 2 line segments, with the point as second return value"
    },
    
    "circles_within_range": {
        "scope": "lobster",
        "prefix": "circles_within_range",
        "body": ["circles_within_range(${1:dist}, ${2:positions}, ${3:radiuses}, ${4:positions2}, ${5:radiuses2}, ${6:gridsize})"],
        "description": "circles_within_range(dist:float, positions:[float2], radiuses:[float], positions2:[float2], radiuses2:[float], gridsize:int2) -> [[int]] \n Given a vector of 2D positions (and same size vectors of radiuses), returns a vector of vectors of indices (to the second set of positions and radiuses) of the circles that are within dist of eachothers radius. If the second set are [], the first set is used for both (and the self element is excluded). gridsize optionally specifies the size of the grid to use for accellerated lookup of nearby points. This is essential for the algorithm to be fast, too big or too small can cause slowdown. Omit it, and a heuristic will be chosen for you, which is currently sqrt(num_circles) * 2 along each dimension, e.g. 100 elements would use a 20x20 grid. Efficiency wise this algorithm is fastest if there is not too much variance in the radiuses of the second set and/or the second set has smaller radiuses than the first."
    },
    
    "wave_function_collapse": {
        "scope": "lobster",
        "prefix": "wave_function_collapse",
        "body": ["wave_function_collapse(${1:tilemap}, ${2:size})"],
        "description": "wave_function_collapse(tilemap:[string], size:int2) -> [string], int \n returns a tilemap of given size modelled after the possible shapes in the input tilemap. Tilemap should consist of chars in the 0..127 range. Second return value the number of failed neighbor matches, this should ideally be 0, but can be non-0 for larger maps. Simply call this function repeatedly until it is 0"
    },
    
    "hash": {
        "scope": "lobster",
        "prefix": "hash",
        "body": ["hash(${1:x})"],
        "description": "hash(x:int) -> int \n hashes an int value into a positive int; may be the identity function"
    },
    
    "hash": {
        "scope": "lobster",
        "prefix": "hash",
        "body": ["hash(x) -> int"],
        "description": "hash(x) -> int \n hashes any ref value into a positive int"
    },
    
    "hash": {
        "scope": "lobster",
        "prefix": "hash",
        "body": ["hash(${1:x})"],
        "description": "hash(x:function) -> int \n hashes a function value into a positive int"
    },
    
    "hash": {
        "scope": "lobster",
        "prefix": "hash",
        "body": ["hash(${1:x})"],
        "description": "hash(x:float) -> int \n hashes a float value into a positive int"
    },
    
    "hash": {
        "scope": "lobster",
        "prefix": "hash",
        "body": ["hash(${1:v})"],
        "description": "hash(v:vec_i) -> int \n hashes a int vector into a positive int"
    },
    
    "hash": {
        "scope": "lobster",
        "prefix": "hash",
        "body": ["hash(${1:v})"],
        "description": "hash(v:vec_f) -> int \n hashes a float vector into a positive int"
    },
    
    "call_function_value": {
        "scope": "lobster",
        "prefix": "call_function_value",
        "body": ["call_function_value(${1:x})"],
        "description": "call_function_value(x:function) \n calls a void / no args function value.. you shouldn't need to use this, it is a demonstration of how native code can call back into Lobster"
    },
    
    "type_string": {
        "scope": "lobster",
        "prefix": "type_string",
        "body": ["type_string(${1:ref})"],
        "description": "type_string(ref) -> string \n string representing the type of the given reference (object/vector/string/resource)"
    },
    
    "type_element_string": {
        "scope": "lobster",
        "prefix": "type_element_string",
        "body": ["type_element_string(${1:v})"],
        "description": "type_element_string(v:[any]) -> string \n string representing the type of the elements of a vector"
    },
    
    "type_field_count": {
        "scope": "lobster",
        "prefix": "type_field_count",
        "body": ["type_field_count(obj) -> int"],
        "description": "type_field_count(obj) -> int \n number of fields in an object, or 0 for other reference types"
    },
    
    "type_field_string": {
        "scope": "lobster",
        "prefix": "type_field_string",
        "body": ["type_field_string(obj, ${1:idx})"],
        "description": "type_field_string(obj, idx:int) -> string \n string representing the type of a field in an object, or empty for other reference types"
    },
    
    "type_field_name": {
        "scope": "lobster",
        "prefix": "type_field_name",
        "body": ["type_field_name(obj, ${1:idx})"],
        "description": "type_field_name(obj, idx:int) -> string \n name of a field in an object, or empty for other reference types"
    },
    
    "type_field_value": {
        "scope": "lobster",
        "prefix": "type_field_value",
        "body": ["type_field_value(obj, ${1:idx})"],
        "description": "type_field_value(obj, idx:int) -> string \n string representing the value of a field in an object, or empty for other reference types"
    },
    
    "program_name": {
        "scope": "lobster",
        "prefix": "program_name",
        "body": ["program_name() -> string"],
        "description": "program_name() -> string \n returns the name of the main program (e.g. "foo.lobster"), "" if running from lpak."
    },
    
    "vm_compiled_mode": {
        "scope": "lobster",
        "prefix": "vm_compiled_mode",
        "body": ["vm_compiled_mode() -> int"],
        "description": "vm_compiled_mode() -> int \n returns if the VM is running in compiled mode (Lobster -> C++), or false for JIT."
    },
    
    "seconds_elapsed": {
        "scope": "lobster",
        "prefix": "seconds_elapsed",
        "body": ["seconds_elapsed() -> float"],
        "description": "seconds_elapsed() -> float \n seconds since program start as a float, unlike gl.time() it is calculated every time it is called"
    },
    
    "date_time": {
        "scope": "lobster",
        "prefix": "date_time",
        "body": ["date_time(${1:utc})"],
        "description": "date_time(utc:bool = false) -> [int] \n a vector of integers representing date & time information (index with date_time.lobster). By default returns local time, pass true for UTC instead."
    },
    
    "date_time_string": {
        "scope": "lobster",
        "prefix": "date_time_string",
        "body": ["date_time_string(${1:utc})"],
        "description": "date_time_string(utc:bool = false) -> string \n a string representing date & time information in the format: 'Www Mmm dd hh:mm:ss yyyy'. By default returns local time, pass true for UTC instead."
    },
    
    "date_time_string_format": {
        "scope": "lobster",
        "prefix": "date_time_string_format",
        "body": ["date_time_string_format(${1:format}, ${2:utc})"],
        "description": "date_time_string_format(format:string, utc:bool = false) -> string \n a string representing date & time information using a formatting string according to https://en.cppreference.com/w/cpp/chrono/c/strftime, for example "%Y_%m_%d_%H_%M_%S". By default returns local time, pass true for UTC instead."
    },
    
    "date_time_build_info": {
        "scope": "lobster",
        "prefix": "date_time_build_info",
        "body": ["date_time_build_info() -> string"],
        "description": "date_time_build_info() -> string \n a string representing information from when this program was compiled."
    },
    
    "assert": {
        "scope": "lobster",
        "prefix": "assert",
        "body": ["assert(condition) -> any"],
        "description": "assert(condition) -> any \n halts the program with an assertion failure if passed false. returns its input. runtime errors like this will contain a stack trace if --runtime-stack-trace is on."
    },
    
    "get_stack_trace": {
        "scope": "lobster",
        "prefix": "get_stack_trace",
        "body": ["get_stack_trace() -> string"],
        "description": "get_stack_trace() -> string \n gets a stack trace of the current location of the program (needs --runtime-stack-trace) without actually stopping the program."
    },
    
    "get_memory_usage": {
        "scope": "lobster",
        "prefix": "get_memory_usage",
        "body": ["get_memory_usage(${1:n})"],
        "description": "get_memory_usage(n:int) -> string \n gets a text showing the top n object types that are using the most memory."
    },
    
    "pass": {
        "scope": "lobster",
        "prefix": "pass",
        "body": ["pass()"],
        "description": "pass() \n does nothing. useful for empty bodies of control structures."
    },
    
    "trace_bytecode": {
        "scope": "lobster",
        "prefix": "trace_bytecode",
        "body": ["trace_bytecode(${1:mode})"],
        "description": "trace_bytecode(mode:int) \n tracing shows each bytecode instruction as it is being executed, not very useful unless you are trying to isolate a compiler bug. Mode is off(0), on(1) or tail only (2)"
    },
    
    "reference_count": {
        "scope": "lobster",
        "prefix": "reference_count",
        "body": ["reference_count(val) -> int"],
        "description": "reference_count(val) -> int \n get the reference count of any value. for compiler debugging, mostly"
    },
    
    "set_console": {
        "scope": "lobster",
        "prefix": "set_console",
        "body": ["set_console(${1:on})"],
        "description": "set_console(on:bool) \n lets you turn on/off the console window (on Windows)"
    },
    
    "set_output_level": {
        "scope": "lobster",
        "prefix": "set_output_level",
        "body": ["set_output_level(${1:level})"],
        "description": "set_output_level(level:int) \n 0 = debug, 1 = verbose, 2 = warn (default), 3 = error, 4 = program"
    },
    
    "set_exit_code": {
        "scope": "lobster",
        "prefix": "set_exit_code",
        "body": ["set_exit_code(${1:code})"],
        "description": "set_exit_code(code:int) \n this will be returned when run as a console application"
    },
    
    "command_line_arguments": {
        "scope": "lobster",
        "prefix": "command_line_arguments",
        "body": ["command_line_arguments() -> [string]"],
        "description": "command_line_arguments() -> [string] \n "
    },
    
    "thread_information": {
        "scope": "lobster",
        "prefix": "thread_information",
        "body": ["thread_information() -> int, int"],
        "description": "thread_information() -> int, int \n returns the number of hardware threads, and the number of cores"
    },
    
    "is_worker_thread": {
        "scope": "lobster",
        "prefix": "is_worker_thread",
        "body": ["is_worker_thread() -> int"],
        "description": "is_worker_thread() -> int \n whether the current thread is a worker thread"
    },
    
    "start_worker_threads": {
        "scope": "lobster",
        "prefix": "start_worker_threads",
        "body": ["start_worker_threads(${1:numthreads})"],
        "description": "start_worker_threads(numthreads:int) \n launch worker threads"
    },
    
    "stop_worker_threads": {
        "scope": "lobster",
        "prefix": "stop_worker_threads",
        "body": ["stop_worker_threads()"],
        "description": "stop_worker_threads() \n only needs to be called if you want to stop the worker threads before the end of the program, or if you want to call start_worker_threads again. workers_alive will become false inside the workers, which should then exit."
    },
    
    "workers_alive": {
        "scope": "lobster",
        "prefix": "workers_alive",
        "body": ["workers_alive() -> int"],
        "description": "workers_alive() -> int \n whether workers should continue doing work. returns false after stop_worker_threads() has been called."
    },
    
    "thread_write": {
        "scope": "lobster",
        "prefix": "thread_write",
        "body": ["thread_write(struct)"],
        "description": "thread_write(struct) \n put this struct in the thread queue"
    },
    
    "thread_read": {
        "scope": "lobster",
        "prefix": "thread_read",
        "body": ["thread_read(${1:type})"],
        "description": "thread_read(type:typeid(any)) -> any? \n get a struct from the thread queue. pass the typeof struct. blocks if no suchstructs available. returns struct, or nil if stop_worker_threads() was called"
    },
    
    "thread_check": {
        "scope": "lobster",
        "prefix": "thread_check",
        "body": ["thread_check(${1:type})"],
        "description": "thread_check(type:typeid(any)) -> any? \n tests if a struct is available on the thread queue. pass the typeof struct. returns struct, or nil if none available, or if stop_worker_threads() was called"
    },
    
    "crash_test_cpp_nullptr_exception": {
        "scope": "lobster",
        "prefix": "crash_test_cpp_nullptr_exception",
        "body": ["crash_test_cpp_nullptr_exception()"],
        "description": "crash_test_cpp_nullptr_exception() \n only for testing crash dump functionality, don't use! :)"
    },
    
    "compile_run_code": {
        "scope": "lobster",
        "prefix": "compile_run_code",
        "body": ["compile_run_code(${1:code}, ${2:args})"],
        "description": "compile_run_code(code:string, args:[string]) -> string, string? \n compiles and runs lobster source, sandboxed from the current program (in its own VM). the argument is a string of code. returns the return value of the program as a string, with an error string as second return value, or nil if none. using parse_data(), two program can communicate more complex data structures even if they don't have the same version of struct definitions."
    },
    
    "compile_run_file": {
        "scope": "lobster",
        "prefix": "compile_run_file",
        "body": ["compile_run_file(${1:filename}, ${2:args})"],
        "description": "compile_run_file(filename:string, args:[string]) -> string, string? \n same as compile_run_code(), only now you pass a filename."
    },
    
    "scan_folder": {
        "scope": "lobster",
        "prefix": "scan_folder",
        "body": ["scan_folder(${1:folder}, ${2:rel})"],
        "description": "scan_folder(folder:string, rel:bool = false) -> [string]?, [int]? \n returns two vectors representing all elements in a folder, the first vector containing all names, the second vector containing sizes in bytes (or -1 if a directory). set rel use a relative path, default is absolute. Returns nil if folder couldn't be scanned."
    },
    
    "read_file": {
        "scope": "lobster",
        "prefix": "read_file",
        "body": ["read_file(${1:file}, ${2:textmode})"],
        "description": "read_file(file:string, textmode:int = 0) -> string? \n returns the contents of a file as a string, or nil if the file can't be found. you may use either \ or / as path separators"
    },
    
    "write_file": {
        "scope": "lobster",
        "prefix": "write_file",
        "body": ["write_file(${1:file}, ${2:contents}, ${3:textmode}, ${4:absolute_path})"],
        "description": "write_file(file:string, contents:string, textmode:int = 0, absolute_path:int = 0) -> int \n creates a file with the contents of a string, returns false if writing wasn't possible"
    },
    
    "rename_file": {
        "scope": "lobster",
        "prefix": "rename_file",
        "body": ["rename_file(${1:old_file}, ${2:new_file})"],
        "description": "rename_file(old_file:string, new_file:string) -> int \n renames a file, returns false if it wasn't possible"
    },
    
    "delete_file": {
        "scope": "lobster",
        "prefix": "delete_file",
        "body": ["delete_file(${1:file})"],
        "description": "delete_file(file:string) -> int \n deletes a file, returns false if it wasn't possible. Will search in all import dirs."
    },
    
    "exists_file": {
        "scope": "lobster",
        "prefix": "exists_file",
        "body": ["exists_file(${1:file})"],
        "description": "exists_file(file:string) -> int \n checks wether a file exists."
    },
    
    "launch_subprocess": {
        "scope": "lobster",
        "prefix": "launch_subprocess",
        "body": ["launch_subprocess(${1:commandline}, ${2:stdin})"],
        "description": "launch_subprocess(commandline:[string], stdin:string = nil) -> int, string \n launches a sub process, with optionally a stdin for the process, and returns its return code (or -1 if it couldn't launch at all), and any output"
    },
    
    "vector_to_buffer": {
        "scope": "lobster",
        "prefix": "vector_to_buffer",
        "body": ["vector_to_buffer(${1:vec}, ${2:width})"],
        "description": "vector_to_buffer(vec:[any], width:int = 4) -> string \n converts a vector of ints/floats (or structs of them) to a buffer, where each scalar is written with "width" bytes (1/2/4/8, default 4). Returns nil if the type couldn't be converted. Uses native endianness."
    },
    
    "ensure_size": {
        "scope": "lobster",
        "prefix": "ensure_size",
        "body": ["ensure_size(${1:string}, ${2:size}, ${3:char}, ${4:extra})"],
        "description": "ensure_size(string:string, size:int, char:int, extra:int = 0) -> string \n ensures a string is at least size characters. if it is, just returns the existing string, otherwise returns a new string of that size (with optionally extra bytes added), with any new characters set to char. You can specify a negative size to mean relative to the end, i.e. new characters will be added at the start. "
    },
    
    "write_int64_le": {
        "scope": "lobster",
        "prefix": "write_int64_le",
        "body": ["write_int64_le(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int64_le(string:string, i:int, val:int) -> string, int \n writes a value as little endian to a string at location i. Uses ensure_size to make the string twice as long (with extra 0 bytes) if no space. Returns new string if resized, and the index of the location right after where the value was written. The _back version writes relative to the end (and writes before the index)"
    },
    
    "write_int32_le": {
        "scope": "lobster",
        "prefix": "write_int32_le",
        "body": ["write_int32_le(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int32_le(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_int16_le": {
        "scope": "lobster",
        "prefix": "write_int16_le",
        "body": ["write_int16_le(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int16_le(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_int8_le": {
        "scope": "lobster",
        "prefix": "write_int8_le",
        "body": ["write_int8_le(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int8_le(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_float64_le": {
        "scope": "lobster",
        "prefix": "write_float64_le",
        "body": ["write_float64_le(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_float64_le(string:string, i:int, val:float) -> string, int \n (see write_int64_le)"
    },
    
    "write_float32_le": {
        "scope": "lobster",
        "prefix": "write_float32_le",
        "body": ["write_float32_le(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_float32_le(string:string, i:int, val:float) -> string, int \n (see write_int64_le)"
    },
    
    "write_int64_le_back": {
        "scope": "lobster",
        "prefix": "write_int64_le_back",
        "body": ["write_int64_le_back(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int64_le_back(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_int32_le_back": {
        "scope": "lobster",
        "prefix": "write_int32_le_back",
        "body": ["write_int32_le_back(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int32_le_back(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_int16_le_back": {
        "scope": "lobster",
        "prefix": "write_int16_le_back",
        "body": ["write_int16_le_back(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int16_le_back(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_int8_le_back": {
        "scope": "lobster",
        "prefix": "write_int8_le_back",
        "body": ["write_int8_le_back(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_int8_le_back(string:string, i:int, val:int) -> string, int \n (see write_int64_le)"
    },
    
    "write_float64_le_back": {
        "scope": "lobster",
        "prefix": "write_float64_le_back",
        "body": ["write_float64_le_back(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_float64_le_back(string:string, i:int, val:float) -> string, int \n (see write_int64_le)"
    },
    
    "write_float32_le_back": {
        "scope": "lobster",
        "prefix": "write_float32_le_back",
        "body": ["write_float32_le_back(${1:string}, ${2:i}, ${3:val})"],
        "description": "write_float32_le_back(string:string, i:int, val:float) -> string, int \n (see write_int64_le)"
    },
    
    "write_substring": {
        "scope": "lobster",
        "prefix": "write_substring",
        "body": ["write_substring(${1:string}, ${2:i}, ${3:substr}, ${4:nullterm})"],
        "description": "write_substring(string:string, i:int, substr:string, nullterm:int) -> string, int \n writes a substring into another string at i (see also write_int64_le)"
    },
    
    "write_substring_back": {
        "scope": "lobster",
        "prefix": "write_substring_back",
        "body": ["write_substring_back(${1:string}, ${2:i}, ${3:substr}, ${4:nullterm})"],
        "description": "write_substring_back(string:string, i:int, substr:string, nullterm:int) -> string, int \n "
    },
    
    "compare_substring": {
        "scope": "lobster",
        "prefix": "compare_substring",
        "body": ["compare_substring(${1:string_a}, ${2:i_a}, ${3:string_b}, ${4:i_b}, ${5:len})"],
        "description": "compare_substring(string_a:string, i_a:int, string_b:string, i_b:int, len:int) -> int \n returns if the two substrings are equal (0), or a < b (-1) or a > b (1)."
    },
    
    "read_int64_le": {
        "scope": "lobster",
        "prefix": "read_int64_le",
        "body": ["read_int64_le(${1:string}, ${2:i})"],
        "description": "read_int64_le(string:string, i:int) -> int, int \n reads a value as little endian from a string at location i. The value must be within bounds of the string. Returns the value, and the index of the location right after where the value was read. The _back version reads relative to the end (and reads before the index)"
    },
    
    "read_int32_le": {
        "scope": "lobster",
        "prefix": "read_int32_le",
        "body": ["read_int32_le(${1:string}, ${2:i})"],
        "description": "read_int32_le(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_int16_le": {
        "scope": "lobster",
        "prefix": "read_int16_le",
        "body": ["read_int16_le(${1:string}, ${2:i})"],
        "description": "read_int16_le(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_int8_le": {
        "scope": "lobster",
        "prefix": "read_int8_le",
        "body": ["read_int8_le(${1:string}, ${2:i})"],
        "description": "read_int8_le(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint64_le": {
        "scope": "lobster",
        "prefix": "read_uint64_le",
        "body": ["read_uint64_le(${1:string}, ${2:i})"],
        "description": "read_uint64_le(string:string, i:int) -> int, int \n reads a value as little endian from a string at location i. The value must be within bounds of the string. Returns the value, and the index of the location right after where the value was read. The _back version reads relative to the end (and reads before the index)"
    },
    
    "read_uint32_le": {
        "scope": "lobster",
        "prefix": "read_uint32_le",
        "body": ["read_uint32_le(${1:string}, ${2:i})"],
        "description": "read_uint32_le(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint16_le": {
        "scope": "lobster",
        "prefix": "read_uint16_le",
        "body": ["read_uint16_le(${1:string}, ${2:i})"],
        "description": "read_uint16_le(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint8_le": {
        "scope": "lobster",
        "prefix": "read_uint8_le",
        "body": ["read_uint8_le(${1:string}, ${2:i})"],
        "description": "read_uint8_le(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_float64_le": {
        "scope": "lobster",
        "prefix": "read_float64_le",
        "body": ["read_float64_le(${1:string}, ${2:i})"],
        "description": "read_float64_le(string:string, i:int) -> float, int \n (see read_int64_le)"
    },
    
    "read_float32_le": {
        "scope": "lobster",
        "prefix": "read_float32_le",
        "body": ["read_float32_le(${1:string}, ${2:i})"],
        "description": "read_float32_le(string:string, i:int) -> float, int \n (see read_int64_le)"
    },
    
    "read_int64_le_back": {
        "scope": "lobster",
        "prefix": "read_int64_le_back",
        "body": ["read_int64_le_back(${1:string}, ${2:i})"],
        "description": "read_int64_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_int32_le_back": {
        "scope": "lobster",
        "prefix": "read_int32_le_back",
        "body": ["read_int32_le_back(${1:string}, ${2:i})"],
        "description": "read_int32_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_int16_le_back": {
        "scope": "lobster",
        "prefix": "read_int16_le_back",
        "body": ["read_int16_le_back(${1:string}, ${2:i})"],
        "description": "read_int16_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_int8_le_back": {
        "scope": "lobster",
        "prefix": "read_int8_le_back",
        "body": ["read_int8_le_back(${1:string}, ${2:i})"],
        "description": "read_int8_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint64_le_back": {
        "scope": "lobster",
        "prefix": "read_uint64_le_back",
        "body": ["read_uint64_le_back(${1:string}, ${2:i})"],
        "description": "read_uint64_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint32_le_back": {
        "scope": "lobster",
        "prefix": "read_uint32_le_back",
        "body": ["read_uint32_le_back(${1:string}, ${2:i})"],
        "description": "read_uint32_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint16_le_back": {
        "scope": "lobster",
        "prefix": "read_uint16_le_back",
        "body": ["read_uint16_le_back(${1:string}, ${2:i})"],
        "description": "read_uint16_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_uint8_le_back": {
        "scope": "lobster",
        "prefix": "read_uint8_le_back",
        "body": ["read_uint8_le_back(${1:string}, ${2:i})"],
        "description": "read_uint8_le_back(string:string, i:int) -> int, int \n (see read_int64_le)"
    },
    
    "read_float64_le_back": {
        "scope": "lobster",
        "prefix": "read_float64_le_back",
        "body": ["read_float64_le_back(${1:string}, ${2:i})"],
        "description": "read_float64_le_back(string:string, i:int) -> float, int \n (see read_int64_le)"
    },
    
    "read_float32_le_back": {
        "scope": "lobster",
        "prefix": "read_float32_le_back",
        "body": ["read_float32_le_back(${1:string}, ${2:i})"],
        "description": "read_float32_le_back(string:string, i:int) -> float, int \n (see read_int64_le)"
    },
    
    "flatbuffers.field_int64": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_int64",
        "body": ["flatbuffers.field_int64(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_int64(string:string, tablei:int, vo:int, def:int) -> int \n reads a flatbuffers field from a string at table location tablei, field vtable offset vo, and default value def. The value must be within bounds of the string. Returns the value (or default if the field was not present)"
    },
    
    "flatbuffers.field_int32": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_int32",
        "body": ["flatbuffers.field_int32(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_int32(string:string, tablei:int, vo:int, def:int) -> int \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_int16": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_int16",
        "body": ["flatbuffers.field_int16(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_int16(string:string, tablei:int, vo:int, def:int) -> int \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_int8": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_int8",
        "body": ["flatbuffers.field_int8(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_int8(string:string, tablei:int, vo:int, def:int) -> int \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_uint64": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_uint64",
        "body": ["flatbuffers.field_uint64(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_uint64(string:string, tablei:int, vo:int, def:int) -> int \n reads a flatbuffers field from a string at table location tablei, field vtable offset vo, and default value def. The value must be within bounds of the string. Returns the value (or default if the field was not present)"
    },
    
    "flatbuffers.field_uint32": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_uint32",
        "body": ["flatbuffers.field_uint32(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_uint32(string:string, tablei:int, vo:int, def:int) -> int \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_uint16": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_uint16",
        "body": ["flatbuffers.field_uint16(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_uint16(string:string, tablei:int, vo:int, def:int) -> int \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_uint8": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_uint8",
        "body": ["flatbuffers.field_uint8(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_uint8(string:string, tablei:int, vo:int, def:int) -> int \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_float64": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_float64",
        "body": ["flatbuffers.field_float64(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_float64(string:string, tablei:int, vo:int, def:float) -> float \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_float32": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_float32",
        "body": ["flatbuffers.field_float32(${1:string}, ${2:tablei}, ${3:vo}, ${4:def})"],
        "description": "flatbuffers.field_float32(string:string, tablei:int, vo:int, def:float) -> float \n (see flatbuffers.field_int64)"
    },
    
    "flatbuffers.field_string": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_string",
        "body": ["flatbuffers.field_string(${1:string}, ${2:tablei}, ${3:vo})"],
        "description": "flatbuffers.field_string(string:string, tablei:int, vo:int) -> string \n reads a flatbuffer string field, returns "" if not present"
    },
    
    "flatbuffers.field_vector_len": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_vector_len",
        "body": ["flatbuffers.field_vector_len(${1:string}, ${2:tablei}, ${3:vo})"],
        "description": "flatbuffers.field_vector_len(string:string, tablei:int, vo:int) -> int \n reads a flatbuffer vector field length, or 0 if not present"
    },
    
    "flatbuffers.field_vector": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_vector",
        "body": ["flatbuffers.field_vector(${1:string}, ${2:tablei}, ${3:vo})"],
        "description": "flatbuffers.field_vector(string:string, tablei:int, vo:int) -> int \n returns a flatbuffer vector field element start, or 0 if not present"
    },
    
    "flatbuffers.field_table": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_table",
        "body": ["flatbuffers.field_table(${1:string}, ${2:tablei}, ${3:vo})"],
        "description": "flatbuffers.field_table(string:string, tablei:int, vo:int) -> int \n returns a flatbuffer table field start, or 0 if not present"
    },
    
    "flatbuffers.field_struct": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_struct",
        "body": ["flatbuffers.field_struct(${1:string}, ${2:tablei}, ${3:vo})"],
        "description": "flatbuffers.field_struct(string:string, tablei:int, vo:int) -> int \n returns a flatbuffer struct field start, or 0 if not present"
    },
    
    "flatbuffers.field_present": {
        "scope": "lobster",
        "prefix": "flatbuffers.field_present",
        "body": ["flatbuffers.field_present(${1:string}, ${2:tablei}, ${3:vo})"],
        "description": "flatbuffers.field_present(string:string, tablei:int, vo:int) -> int \n returns if a flatbuffer field is present (unequal to default)"
    },
    
    "flatbuffers.indirect": {
        "scope": "lobster",
        "prefix": "flatbuffers.indirect",
        "body": ["flatbuffers.indirect(${1:string}, ${2:index})"],
        "description": "flatbuffers.indirect(string:string, index:int) -> int \n returns a flatbuffer offset at index relative to itself"
    },
    
    "flatbuffers.string": {
        "scope": "lobster",
        "prefix": "flatbuffers.string",
        "body": ["flatbuffers.string(${1:string}, ${2:index})"],
        "description": "flatbuffers.string(string:string, index:int) -> string \n returns a flatbuffer string whose offset is at given index"
    },
    
    "flatbuffers.binary_to_json": {
        "scope": "lobster",
        "prefix": "flatbuffers.binary_to_json",
        "body": ["flatbuffers.binary_to_json(${1:schemas}, ${2:binary}, ${3:includedirs})"],
        "description": "flatbuffers.binary_to_json(schemas:string, binary:string, includedirs:[string]) -> string, string? \n returns a JSON string generated from the given binary and corresponding schema.if there was an error parsing the schema, the error will be in the second returnvalue, or nil for no error"
    },
    
    "flatbuffers.json_to_binary": {
        "scope": "lobster",
        "prefix": "flatbuffers.json_to_binary",
        "body": ["flatbuffers.json_to_binary(${1:schema}, ${2:json}, ${3:includedirs})"],
        "description": "flatbuffers.json_to_binary(schema:string, json:string, includedirs:[string]) -> string, string? \n returns a binary flatbuffer generated from the given json and corresponding schema.if there was an error parsing the schema, the error will be in the second returnvalue, or nil for no error"
    },
    
    "parse_data": {
        "scope": "lobster",
        "prefix": "parse_data",
        "body": ["parse_data(${1:typeid}, ${2:stringdata})"],
        "description": "parse_data(typeid:typeid(any), stringdata:string) -> any?, string? \n parses a string containing a data structure in lobster syntax (what you get if you convert an arbitrary data structure to a string) back into a data structure. supports int/float/string/vector and classes. classes will be forced to be compatible with their  current definitions, i.e. too many elements will be truncated, missing elements will be set to 0/nil if possible. useful for simple file formats. returns the value and an error string as second return value (or nil if no error)"
    },
    
    "flexbuffers_value_to_binary": {
        "scope": "lobster",
        "prefix": "flexbuffers_value_to_binary",
        "body": ["flexbuffers_value_to_binary(val, ${1:max_nesting}, ${2:cycle_detection})"],
        "description": "flexbuffers_value_to_binary(val, max_nesting:int = 0, cycle_detection:bool = false) -> string \n turns any reference value into a flexbuffer. max_nesting defaults to 100. cycle_detection is by default off (expensive)"
    },
    
    "flexbuffers_binary_to_value": {
        "scope": "lobster",
        "prefix": "flexbuffers_binary_to_value",
        "body": ["flexbuffers_binary_to_value(${1:typeid}, ${2:flex})"],
        "description": "flexbuffers_binary_to_value(typeid:typeid(any), flex:string) -> any?, string? \n turns a flexbuffer into a value"
    },
    
    "flexbuffers_binary_to_json": {
        "scope": "lobster",
        "prefix": "flexbuffers_binary_to_json",
        "body": ["flexbuffers_binary_to_json(${1:flex}, ${2:field_quotes}, ${3:indent_string})"],
        "description": "flexbuffers_binary_to_json(flex:string, field_quotes:bool, indent_string:string) -> string?, string? \n turns a flexbuffer into a JSON string. If indent_string is empty, will be a single line string"
    },
    
    "flexbuffers_json_to_binary": {
        "scope": "lobster",
        "prefix": "flexbuffers_json_to_binary",
        "body": ["flexbuffers_json_to_binary(${1:json}, ${2:filename_for_errors})"],
        "description": "flexbuffers_json_to_binary(json:string, filename_for_errors:string = nil) -> string, string? \n turns a JSON string into a flexbuffer, second value is error, if any"
    },
    
    "lobster_value_to_binary": {
        "scope": "lobster",
        "prefix": "lobster_value_to_binary",
        "body": ["lobster_value_to_binary(val) -> string"],
        "description": "lobster_value_to_binary(val) -> string \n turns any reference value into a binary using a fast & compact Lobster native serialization format. this is intended for threads/networking, not for storage (since it is not readable by other languages). data structures participating must have been marked by attribute serializable. does not provide protection against cycles, use flexbuffers if that is a concern. "
    },
    
    "lobster_binary_to_value": {
        "scope": "lobster",
        "prefix": "lobster_binary_to_value",
        "body": ["lobster_binary_to_value(${1:typeid}, ${2:bin})"],
        "description": "lobster_binary_to_value(typeid:typeid(any), bin:string) -> any?, string? \n turns binary created by lobster_value_to_binary back into a value"
    },
    
    "matrix.multiply": {
        "scope": "lobster",
        "prefix": "matrix.multiply",
        "body": ["matrix.multiply(${1:a}, ${2:b})"],
        "description": "matrix.multiply(a:[float], b:[float]) -> [float] \n input matrices must be 4x4 elements"
    },
    
    "matrix.rotate_x": {
        "scope": "lobster",
        "prefix": "matrix.rotate_x",
        "body": ["matrix.rotate_x(${1:angle})"],
        "description": "matrix.rotate_x(angle:float2) -> [float] \n "
    },
    
    "matrix.rotate_y": {
        "scope": "lobster",
        "prefix": "matrix.rotate_y",
        "body": ["matrix.rotate_y(${1:angle})"],
        "description": "matrix.rotate_y(angle:float2) -> [float] \n "
    },
    
    "matrix.rotate_z": {
        "scope": "lobster",
        "prefix": "matrix.rotate_z",
        "body": ["matrix.rotate_z(${1:angle})"],
        "description": "matrix.rotate_z(angle:float2) -> [float] \n "
    },
    
    "matrix.translation": {
        "scope": "lobster",
        "prefix": "matrix.translation",
        "body": ["matrix.translation(${1:trans})"],
        "description": "matrix.translation(trans:float3) -> [float] \n "
    },
    
    "gl.window": {
        "scope": "lobster",
        "prefix": "gl.window",
        "body": ["gl.window(${1:title}, ${2:xs}, ${3:ys}, ${4:flags}, ${5:samples})"],
        "description": "gl.window(title:string, xs:int, ys:int, flags:int = 0, samples:int = 1) -> string? \n opens a window for OpenGL rendering. returns error string if any problems, nil otherwise. For flags, see modules/gl.lobster"
    },
    
    "gl.require_version": {
        "scope": "lobster",
        "prefix": "gl.require_version",
        "body": ["gl.require_version(${1:major}, ${2:minor})"],
        "description": "gl.require_version(major:int, minor:int) \n Call this before gl.window to request a certain version of OpenGL context. Currently only works on win/nix, minimum is 3.2."
    },
    
    "gl.load_materials": {
        "scope": "lobster",
        "prefix": "gl.load_materials",
        "body": ["gl.load_materials(${1:materialdefs}, ${2:inline}, ${3:prefix})"],
        "description": "gl.load_materials(materialdefs:string, inline:int = 0, prefix:string = nil) -> string? \n loads an additional materials file (data/shaders/default.materials is already loaded by default by gl.window()). if inline is true, materialdefs is not a filename, but the actual materials. prefix will be added to all shader names allowing you to compile the same shaders multiple times. returns error string if any problems, nil otherwise."
    },
    
    "gl.scissor": {
        "scope": "lobster",
        "prefix": "gl.scissor",
        "body": ["gl.scissor(${1:top_left}, ${2:size})"],
        "description": "gl.scissor(top_left:int2, size:int2) -> int2, int2 \n Sets the scissor testing, so only the pixels in the given rectangle canbe written.  Returns the previous value of the scissor rectangle."
    },
    
    "gl.frame": {
        "scope": "lobster",
        "prefix": "gl.frame",
        "body": ["gl.frame() -> int"],
        "description": "gl.frame() -> int \n advances rendering by one frame, swaps buffers, and collects new input events. returns false if the closebutton on the window was pressed"
    },
    
    "gl.shutdown": {
        "scope": "lobster",
        "prefix": "gl.shutdown",
        "body": ["gl.shutdown()"],
        "description": "gl.shutdown() \n shuts down the OpenGL window. you only need to call this function if you wish to close it before the end of the program"
    },
    
    "gl.window_title": {
        "scope": "lobster",
        "prefix": "gl.window_title",
        "body": ["gl.window_title(${1:title})"],
        "description": "gl.window_title(title:string) -> string \n changes the window title."
    },
    
    "gl.window_min_max": {
        "scope": "lobster",
        "prefix": "gl.window_min_max",
        "body": ["gl.window_min_max(${1:dir})"],
        "description": "gl.window_min_max(dir:int) \n >0 to maximize, <0 to minimize or 0 to restore."
    },
    
    "gl.fullscreen": {
        "scope": "lobster",
        "prefix": "gl.fullscreen",
        "body": ["gl.fullscreen(${1:mode})"],
        "description": "gl.fullscreen(mode:int) \n use window_init enum flags from gl module"
    },
    
    "gl.visible": {
        "scope": "lobster",
        "prefix": "gl.visible",
        "body": ["gl.visible() -> int"],
        "description": "gl.visible() -> int \n checks if the window is currently visible (not minimized, or on mobile devices, in the foreground). If false, you should not render anything, nor run the frame's code."
    },
    
    "gl.cursor": {
        "scope": "lobster",
        "prefix": "gl.cursor",
        "body": ["gl.cursor(${1:on})"],
        "description": "gl.cursor(on:bool) -> int \n default the cursor is visible, turn off for implementing FPS like control schemes. return whether it was on before this call."
    },
    
    "gl.grab": {
        "scope": "lobster",
        "prefix": "gl.grab",
        "body": ["gl.grab(${1:on})"],
        "description": "gl.grab(on:bool) -> int \n grabs the mouse when the window is active. return whether it's on."
    },
    
    "gl.button": {
        "scope": "lobster",
        "prefix": "gl.button",
        "body": ["gl.button(${1:name})"],
        "description": "gl.button(name:string) -> int, int \n returns the number of frames a key/mousebutton/finger has been down. went down this frame: == 1, is already down: >= 1, not down: == 0. the second return value is the same, but for the up direction: went up this frame: == 1, is already up: >= 1, not up: == 0. it is possible both happen inside one frame, i.e. down==1 and up==1!  for name, pass a string like mouse1/mouse2/mouse3/escape/space/up/down/a/b/f1/joy1 etc. mouse11 and on are additional fingers"
    },
    
    "gl.key_repeat": {
        "scope": "lobster",
        "prefix": "gl.key_repeat",
        "body": ["gl.key_repeat(${1:name})"],
        "description": "gl.key_repeat(name:string) -> int \n returns if a key was a key repeat (went down, or is down with a key repeat)"
    },
    
    "gl.start_text_input": {
        "scope": "lobster",
        "prefix": "gl.start_text_input",
        "body": ["gl.start_text_input(${1:pos}, ${2:size})"],
        "description": "gl.start_text_input(pos:int2, size:int2) \n starts text input. unlike gl.button which gets you keyboard keys, this is for input of strings, that can deal with unicode IME etc. pos & size are a hint where the string being edited is being displayed, such that an IME can popup a box next to it, if needed."
    },
    
    "gl.text_input_state": {
        "scope": "lobster",
        "prefix": "gl.text_input_state",
        "body": ["gl.text_input_state() -> string, string, int, int"],
        "description": "gl.text_input_state() -> string, string, int, int \n returns the string that has been input since text input started, followed by any candinate text (partial characters in case of IME editing), and the cursor & selection size for it"
    },
    
    "gl.set_text_input": {
        "scope": "lobster",
        "prefix": "gl.set_text_input",
        "body": ["gl.set_text_input(${1:text})"],
        "description": "gl.set_text_input(text:string) \n overwrites the current text string being accumulated"
    },
    
    "gl.end_text_input": {
        "scope": "lobster",
        "prefix": "gl.end_text_input",
        "body": ["gl.end_text_input()"],
        "description": "gl.end_text_input() \n stops accumulating text input"
    },
    
    "gl.touchscreen": {
        "scope": "lobster",
        "prefix": "gl.touchscreen",
        "body": ["gl.touchscreen() -> int"],
        "description": "gl.touchscreen() -> int \n whether a you're getting input from a touch screen (as opposed to mouse & keyboard)"
    },
    
    "gl.dpi": {
        "scope": "lobster",
        "prefix": "gl.dpi",
        "body": ["gl.dpi(${1:screen})"],
        "description": "gl.dpi(screen:int) -> int \n the DPI of the screen. always returns a value for screen 0, any other screens may return 0 to indicate the screen doesn't exist"
    },
    
    "gl.window_size": {
        "scope": "lobster",
        "prefix": "gl.window_size",
        "body": ["gl.window_size() -> int2"],
        "description": "gl.window_size() -> int2 \n a vector representing the size (in pixels) of the window, changes when the user resizes"
    },
    
    "gl.mouse_pos": {
        "scope": "lobster",
        "prefix": "gl.mouse_pos",
        "body": ["gl.mouse_pos(${1:i})"],
        "description": "gl.mouse_pos(i:int) -> int2 \n the current mouse/finger position in pixels, pass a value other than 0 to read additional fingers (for touch screens only if the corresponding gl.isdown is true)"
    },
    
    "gl.mouse_delta": {
        "scope": "lobster",
        "prefix": "gl.mouse_delta",
        "body": ["gl.mouse_delta(${1:i})"],
        "description": "gl.mouse_delta(i:int) -> int2 \n number of pixels the mouse/finger has moved since the last frame. use this instead of substracting positions to correctly deal with lifted fingers and FPS mode (gl.cursor(0))"
    },
    
    "gl.local_mouse_pos": {
        "scope": "lobster",
        "prefix": "gl.local_mouse_pos",
        "body": ["gl.local_mouse_pos(${1:i})"],
        "description": "gl.local_mouse_pos(i:int) -> float2 \n the current mouse/finger position local to the current transform (gl.translate etc) (for touch screens only if the corresponding gl.isdown is true)"
    },
    
    "gl.last_pos": {
        "scope": "lobster",
        "prefix": "gl.last_pos",
        "body": ["gl.last_pos(${1:name}, ${2:down})"],
        "description": "gl.last_pos(name:string, down:int) -> int2 \n position (in pixels) key/mousebutton/finger last went down (true) or up (false)"
    },
    
    "gl.local_last_pos": {
        "scope": "lobster",
        "prefix": "gl.local_last_pos",
        "body": ["gl.local_last_pos(${1:name}, ${2:down})"],
        "description": "gl.local_last_pos(name:string, down:int) -> float2 \n position (local to the current transform) key/mousebutton/finger last went down (true) or up (false)"
    },
    
    "gl.mousewheel_delta": {
        "scope": "lobster",
        "prefix": "gl.mousewheel_delta",
        "body": ["gl.mousewheel_delta() -> int"],
        "description": "gl.mousewheel_delta() -> int \n amount the mousewheel scrolled this frame, in number of notches"
    },
    
    "gl.joy_axis": {
        "scope": "lobster",
        "prefix": "gl.joy_axis",
        "body": ["gl.joy_axis(${1:i})"],
        "description": "gl.joy_axis(i:int) -> float \n the current joystick orientation for axis i, as -1 to 1 value. this gives you raw joystick values, prefer to use controller_axis()"
    },
    
    "gl.controller_axis": {
        "scope": "lobster",
        "prefix": "gl.controller_axis",
        "body": ["gl.controller_axis(${1:i})"],
        "description": "gl.controller_axis(i:int) -> float \n the current controller orientation for axis i, as -1 to 1 value. the axes are (from 0): leftx, lefty, rightx, righty, triggerleft, triggerright. down/right have positive values. make sure to call gl.init_controller_database()"
    },
    
    "gl.delta_time": {
        "scope": "lobster",
        "prefix": "gl.delta_time",
        "body": ["gl.delta_time() -> float"],
        "description": "gl.delta_time() -> float \n seconds since the last frame, updated only once per frame"
    },
    
    "gl.delta_time_rolling": {
        "scope": "lobster",
        "prefix": "gl.delta_time_rolling",
        "body": ["gl.delta_time_rolling(${1:n})"],
        "description": "gl.delta_time_rolling(n:int) -> float \n seconds since the last frame, updated only once per frame, as a rolling average over the last N frames (max 64)"
    },
    
    "gl.time": {
        "scope": "lobster",
        "prefix": "gl.time",
        "body": ["gl.time() -> float"],
        "description": "gl.time() -> float \n seconds since the start of the OpenGL subsystem, updated only once per frame (use seconds_elapsed() for continuous timing)"
    },
    
    "gl.last_time": {
        "scope": "lobster",
        "prefix": "gl.last_time",
        "body": ["gl.last_time(${1:name}, ${2:down})"],
        "description": "gl.last_time(name:string, down:int) -> float \n time key/mousebutton/finger last went down (true) or up (false)"
    },
    
    "gl.clear": {
        "scope": "lobster",
        "prefix": "gl.clear",
        "body": ["gl.clear(${1:col})"],
        "description": "gl.clear(col:float4) \n clears the framebuffer (and depth buffer) to the given color"
    },
    
    "gl.color": {
        "scope": "lobster",
        "prefix": "gl.color",
        "body": ["gl.color(${1:col})"],
        "description": "gl.color(col:float4) -> float4 \n sets the current color, returns previous one"
    },
    
    "gl.polygon": {
        "scope": "lobster",
        "prefix": "gl.polygon",
        "body": ["gl.polygon(${1:vertlist})"],
        "description": "gl.polygon(vertlist:[vec_f]) \n renders a polygon using the list of points given. warning: gl.polygon creates a new mesh every time, gl.new_poly/gl.render_mesh is faster."
    },
    
    "gl.rounded_rectangle": {
        "scope": "lobster",
        "prefix": "gl.rounded_rectangle",
        "body": ["gl.rounded_rectangle(${1:size}, ${2:segments}, ${3:corner_ratio})"],
        "description": "gl.rounded_rectangle(size:float2, segments:int, corner_ratio:float) \n renders a rounded rectangle, try segments 50, corner_ratio 0.2"
    },
    
    "gl.circle": {
        "scope": "lobster",
        "prefix": "gl.circle",
        "body": ["gl.circle(${1:radius}, ${2:segments})"],
        "description": "gl.circle(radius:float, segments:int) \n renders a circle"
    },
    
    "gl.open_circle": {
        "scope": "lobster",
        "prefix": "gl.open_circle",
        "body": ["gl.open_circle(${1:radius}, ${2:segments}, ${3:thickness})"],
        "description": "gl.open_circle(radius:float, segments:int, thickness:float) \n renders a circle that is open on the inside. thickness is the fraction of the radius that is filled, try e.g. 0.2"
    },
    
    "gl.unit_cube": {
        "scope": "lobster",
        "prefix": "gl.unit_cube",
        "body": ["gl.unit_cube(${1:insideout})"],
        "description": "gl.unit_cube(insideout:int = 0) \n renders a unit cube (0,0,0) - (1,1,1). optionally pass true to have it rendered inside out"
    },
    
    "gl.rotate_x": {
        "scope": "lobster",
        "prefix": "gl.rotate_x",
        "body": ["gl.rotate_x(${1:vec})"],
        "description": "gl.rotate_x(vec:float2) \n rotates the yz plane around the x axis, using a 2D vector normalized vector as angle"
    },
    
    "gl.rotate_y": {
        "scope": "lobster",
        "prefix": "gl.rotate_y",
        "body": ["gl.rotate_y(${1:angle})"],
        "description": "gl.rotate_y(angle:float2) \n rotates the xz plane around the y axis, using a 2D vector normalized vector as angle"
    },
    
    "gl.rotate_z": {
        "scope": "lobster",
        "prefix": "gl.rotate_z",
        "body": ["gl.rotate_z(${1:angle})"],
        "description": "gl.rotate_z(angle:float2) \n rotates the xy plane around the z axis (used in 2D), using a 2D vector normalized vector as angle"
    },
    
    "gl.translate": {
        "scope": "lobster",
        "prefix": "gl.translate",
        "body": ["gl.translate(${1:vec})"],
        "description": "gl.translate(vec:vec_f) \n translates the current coordinate system along a vector"
    },
    
    "gl.translate": {
        "scope": "lobster",
        "prefix": "gl.translate",
        "body": ["gl.translate(${1:vec})"],
        "description": "gl.translate(vec:vec_i) \n translates the current coordinate system along a vector"
    },
    
    "gl.scale": {
        "scope": "lobster",
        "prefix": "gl.scale",
        "body": ["gl.scale(${1:factor})"],
        "description": "gl.scale(factor:float) \n scales the current coordinate system using a numerical factor"
    },
    
    "gl.scale": {
        "scope": "lobster",
        "prefix": "gl.scale",
        "body": ["gl.scale(${1:factor})"],
        "description": "gl.scale(factor:vec_f) \n scales the current coordinate system using a vector"
    },
    
    "gl.origin": {
        "scope": "lobster",
        "prefix": "gl.origin",
        "body": ["gl.origin() -> float2"],
        "description": "gl.origin() -> float2 \n returns a vector representing the current transform origin in pixels. only makes sense in 2D mode (no gl.perspective called)."
    },
    
    "gl.scaling": {
        "scope": "lobster",
        "prefix": "gl.scaling",
        "body": ["gl.scaling() -> float2"],
        "description": "gl.scaling() -> float2 \n returns a vector representing the current transform scale in pixels. only makes sense in 2D mode (no gl.perspective called)."
    },
    
    "gl.model_view_projection": {
        "scope": "lobster",
        "prefix": "gl.model_view_projection",
        "body": ["gl.model_view_projection() -> [float]"],
        "description": "gl.model_view_projection() -> [float] \n returns a vector representing the current model view projection matrix (16 elements)"
    },
    
    "gl.model_view": {
        "scope": "lobster",
        "prefix": "gl.model_view",
        "body": ["gl.model_view() -> [float]"],
        "description": "gl.model_view() -> [float] \n returns a vector representing the current model view matrix (16 elements)"
    },
    
    "gl.projection": {
        "scope": "lobster",
        "prefix": "gl.projection",
        "body": ["gl.projection() -> [float]"],
        "description": "gl.projection() -> [float] \n returns a vector representing the current projection matrix (16 elements)"
    },
    
    "gl.push_model_view": {
        "scope": "lobster",
        "prefix": "gl.push_model_view",
        "body": ["gl.push_model_view()"],
        "description": "gl.push_model_view() \n save the current state of the model view matrix (gl.translate, gl.rotate etc)"
    },
    
    "gl.pop_model_view": {
        "scope": "lobster",
        "prefix": "gl.pop_model_view",
        "body": ["gl.pop_model_view() -> int"],
        "description": "gl.pop_model_view() -> int \n restore a previous state of the model view matrix. returns false if none"
    },
    
    "gl.point_scale": {
        "scope": "lobster",
        "prefix": "gl.point_scale",
        "body": ["gl.point_scale(${1:factor})"],
        "description": "gl.point_scale(factor:float) \n sets the current scaling factor for point sprites. this can be what the current gl.scale is, or different, depending on the desired visuals. the ideal size may also be FOV dependent."
    },
    
    "gl.line_mode": {
        "scope": "lobster",
        "prefix": "gl.line_mode",
        "body": ["gl.line_mode(${1:on})"],
        "description": "gl.line_mode(on:int) -> int \n set line mode (true == on), returns previous mode"
    },
    
    "gl.cull_front": {
        "scope": "lobster",
        "prefix": "gl.cull_front",
        "body": ["gl.cull_front(${1:on})"],
        "description": "gl.cull_front(on:bool) -> int \n set culling front (true) or back (false), returns previous value."
    },
    
    "gl.hit": {
        "scope": "lobster",
        "prefix": "gl.hit",
        "body": ["gl.hit(${1:vec}, ${2:i})"],
        "description": "gl.hit(vec:vec_f, i:int) -> int \n whether the mouse/finger is inside of the rectangle specified in terms of the current transform (for touch screens only if the corresponding gl.isdown is true). Only true if the last rectangle for which gl.hit was true last frame is of the same size as this one (allows you to safely test in most cases of overlapping rendering)"
    },
    
    "gl.rect": {
        "scope": "lobster",
        "prefix": "gl.rect",
        "body": ["gl.rect(${1:size}, ${2:centered})"],
        "description": "gl.rect(size:float2, centered:int = 0) \n renders a rectangle (0,0)..(1,1) (or (-1,-1)..(1,1) when centered), scaled by the given size."
    },
    
    "gl.rect_tc_col": {
        "scope": "lobster",
        "prefix": "gl.rect_tc_col",
        "body": ["gl.rect_tc_col(${1:size}, ${2:tc}, ${3:tcsize}, ${4:cols})"],
        "description": "gl.rect_tc_col(size:float2, tc:float2, tcsize:float2, cols:[float4]) \n Like gl.rect renders a sized quad, but allows you to specify texture coordinates and optionally colors (empty list for all white). Slow."
    },
    
    "gl.unit_square": {
        "scope": "lobster",
        "prefix": "gl.unit_square",
        "body": ["gl.unit_square(${1:centered})"],
        "description": "gl.unit_square(centered:int = 0) \n renders a square (0,0)..(1,1) (or (-1,-1)..(1,1) when centered)"
    },
    
    "gl.line": {
        "scope": "lobster",
        "prefix": "gl.line",
        "body": ["gl.line(${1:start}, ${2:end}, ${3:thickness})"],
        "description": "gl.line(start:vec_f, end:vec_f, thickness:float) \n renders a line with the given thickness"
    },
    
    "gl.perspective": {
        "scope": "lobster",
        "prefix": "gl.perspective",
        "body": ["gl.perspective(${1:fovy}, ${2:znear}, ${3:zfar}, ${4:frame_buffer_size}, ${5:frame_buffer_offset}, ${6:nodepth})"],
        "description": "gl.perspective(fovy:float, znear:float, zfar:float, frame_buffer_size:int2 = nil, frame_buffer_offset:int2 = nil, nodepth:int = 0) \n changes from 2D mode (default) to 3D right handed perspective mode with vertical fov (try 60), far plane (furthest you want to be able to render, try 1000) and near plane (try 1). Optionally specify a framebuffer size to override the current gl.framebuffer_size"
    },
    
    "gl.ortho": {
        "scope": "lobster",
        "prefix": "gl.ortho",
        "body": ["gl.ortho(${1:rh}, ${2:depth})"],
        "description": "gl.ortho(rh:int = 0, depth:int = 0) \n changes back to 2D mode rendering with a coordinate system from (0,0) top-left to the screen size in pixels bottom right. this is the default at the start of a frame, use this call to get back to that after gl.perspective. Pass true to rh have (0,0) bottom-left instead. Pass true to depth to have depth testing/writing on."
    },
    
    "gl.ortho3d": {
        "scope": "lobster",
        "prefix": "gl.ortho3d",
        "body": ["gl.ortho3d(${1:center}, ${2:extends})"],
        "description": "gl.ortho3d(center:float3, extends:float3) \n sets a custom ortho projection as 3D projection."
    },
    
    "gl.new_poly": {
        "scope": "lobster",
        "prefix": "gl.new_poly",
        "body": ["gl.new_poly(${1:positions})"],
        "description": "gl.new_poly(positions:[vec_f]) -> resource<mesh> \n creates a mesh out of a loop of points, much like gl.polygon. gl.line_mode determines how this gets drawn (fan or loop). automatically generates texcoords and normals. returns mesh id"
    },
    
    "gl.new_mesh": {
        "scope": "lobster",
        "prefix": "gl.new_mesh",
        "body": ["gl.new_mesh(${1:format}, ${2:positions}, ${3:colors}, ${4:normals}, ${5:texcoords1}, ${6:texcoords2}, ${7:indices})"],
        "description": "gl.new_mesh(format:string, positions:[float3], colors:[float4], normals:[float3], texcoords1:[float2], texcoords2:[float2], indices:[int] = nil) -> resource<mesh> \n creates a new vertex buffer and returns an integer id (1..) for it. format must be made up of characters P (position), C (color), T (texcoord), N (normal). indices may be []. positions is obligatory. you may specify [] for any of the other attributes if not required by format, or to get defaults for colors (white) / texcoords (position x & y) / normals (generated from adjacent triangles)."
    },
    
    "gl.new_mesh_iqm": {
        "scope": "lobster",
        "prefix": "gl.new_mesh_iqm",
        "body": ["gl.new_mesh_iqm(${1:filename})"],
        "description": "gl.new_mesh_iqm(filename:string) -> resource<mesh>? \n load a .iqm file into a mesh, returns mesh or nil on failure to load."
    },
    
    "gl.mesh_parts": {
        "scope": "lobster",
        "prefix": "gl.mesh_parts",
        "body": ["gl.mesh_parts(${1:m})"],
        "description": "gl.mesh_parts(m:resource<mesh>) -> [string] \n returns an array of names of all parts of mesh m (names may be empty)"
    },
    
    "gl.mesh_size": {
        "scope": "lobster",
        "prefix": "gl.mesh_size",
        "body": ["gl.mesh_size(${1:m})"],
        "description": "gl.mesh_size(m:resource<mesh>) -> int \n returns the number of verts in this mesh"
    },
    
    "gl.mesh_animations": {
        "scope": "lobster",
        "prefix": "gl.mesh_animations",
        "body": ["gl.mesh_animations(${1:m})"],
        "description": "gl.mesh_animations(m:resource<mesh>) -> [string] \n return names of animations"
    },
    
    "gl.mesh_animation_frames": {
        "scope": "lobster",
        "prefix": "gl.mesh_animation_frames",
        "body": ["gl.mesh_animation_frames(${1:m}, ${2:name})"],
        "description": "gl.mesh_animation_frames(m:resource<mesh>, name:string) -> int, int, float \n given name, return animation's first frame, number of frames and framerate, or '-1, -1, 0.0' if name is invalid"
    },
    
    "gl.animate_mesh": {
        "scope": "lobster",
        "prefix": "gl.animate_mesh",
        "body": ["gl.animate_mesh(${1:m}, ${2:frame})"],
        "description": "gl.animate_mesh(m:resource<mesh>, frame:float) \n set the frame for animated mesh m"
    },
    
    "gl.animate_mesh_blend": {
        "scope": "lobster",
        "prefix": "gl.animate_mesh_blend",
        "body": ["gl.animate_mesh_blend(${1:m}, ${2:frame1}, ${3:frame2}, ${4:blending})"],
        "description": "gl.animate_mesh_blend(m:resource<mesh>, frame1:float, frame2:float, blending:float) \n set the blending frames for animated mesh m"
    },
    
    "gl.render_mesh": {
        "scope": "lobster",
        "prefix": "gl.render_mesh",
        "body": ["gl.render_mesh(${1:m})"],
        "description": "gl.render_mesh(m:resource<mesh>) \n renders the specified mesh"
    },
    
    "gl.save_mesh": {
        "scope": "lobster",
        "prefix": "gl.save_mesh",
        "body": ["gl.save_mesh(${1:m}, ${2:name}, ${3:format})"],
        "description": "gl.save_mesh(m:resource<mesh>, name:string, format:int = 0) -> string? \n saves the mesh to a file in the specified format (ply by default). for other supported formats, see modules/gl.lobster. warning: when using iqm format, make sure vertex format is 'PNC', which is being used by meshgen and cubegen. returns error string if any problems, nil otherwise."
    },
    
    "gl.mesh_pointsize": {
        "scope": "lobster",
        "prefix": "gl.mesh_pointsize",
        "body": ["gl.mesh_pointsize(${1:m}, ${2:pointsize})"],
        "description": "gl.mesh_pointsize(m:resource<mesh>, pointsize:float) \n sets the pointsize for this mesh. the mesh must have been created with indices = nil for point rendering to be used. you also want to use a shader that works with points, such as color_attr_particle."
    },
    
    "gl.set_shader": {
        "scope": "lobster",
        "prefix": "gl.set_shader",
        "body": ["gl.set_shader(${1:shader})"],
        "description": "gl.set_shader(shader:string) \n changes the current shader. shaders must reside in the shaders folder, builtin ones are: color / textured / phong"
    },
    
    "gl.set_shader": {
        "scope": "lobster",
        "prefix": "gl.set_shader",
        "body": ["gl.set_shader(${1:shader})"],
        "description": "gl.set_shader(shader:resource<shader>) \n changes the current shader from a value received from gl.get_shader"
    },
    
    "gl.get_shader": {
        "scope": "lobster",
        "prefix": "gl.get_shader",
        "body": ["gl.get_shader(${1:shader})"],
        "description": "gl.get_shader(shader:string) -> resource<shader> \n gets a shader by name, for use with gl.set_shader"
    },
    
    "gl.set_uniform": {
        "scope": "lobster",
        "prefix": "gl.set_uniform",
        "body": ["gl.set_uniform(${1:name}, ${2:value})"],
        "description": "gl.set_uniform(name:string, value:vec_f) -> int \n set a uniform on the current shader. size of float vector must match size of uniform in the shader. returns false on error."
    },
    
    "gl.set_uniform": {
        "scope": "lobster",
        "prefix": "gl.set_uniform",
        "body": ["gl.set_uniform(${1:name}, ${2:value})"],
        "description": "gl.set_uniform(name:string, value:float) -> int \n set a uniform on the current shader. uniform in the shader must be a single float. returns false on error."
    },
    
    "gl.set_uniform": {
        "scope": "lobster",
        "prefix": "gl.set_uniform",
        "body": ["gl.set_uniform(${1:name}, ${2:value})"],
        "description": "gl.set_uniform(name:string, value:vec_i) -> int \n set a uniform on the current shader. size of int vector must match size of uniform in the shader. returns false on error."
    },
    
    "gl.set_uniform": {
        "scope": "lobster",
        "prefix": "gl.set_uniform",
        "body": ["gl.set_uniform(${1:name}, ${2:value})"],
        "description": "gl.set_uniform(name:string, value:int) -> int \n set a uniform on the current shader. uniform in the shader must be a single int. returns false on error."
    },
    
    "gl.set_uniform_array": {
        "scope": "lobster",
        "prefix": "gl.set_uniform_array",
        "body": ["gl.set_uniform_array(${1:name}, ${2:value})"],
        "description": "gl.set_uniform_array(name:string, value:[float4]) -> int \n set a uniform on the current shader. uniform in the shader must be an array of vec4. returns false on error."
    },
    
    "gl.set_uniform_matrix": {
        "scope": "lobster",
        "prefix": "gl.set_uniform_matrix",
        "body": ["gl.set_uniform_matrix(${1:name}, ${2:value}, ${3:morerows})"],
        "description": "gl.set_uniform_matrix(name:string, value:[float], morerows:bool = false) -> int \n set a uniform on the current shader. pass a vector of 4/6/9/12/16 floats to set a mat2/mat3x2/mat3/mat4x3/mat4 respectively. pass true for morerows to get mat2x3/mat3x4. returns false on error."
    },
    
    "gl.update_buffer_object": {
        "scope": "lobster",
        "prefix": "gl.update_buffer_object",
        "body": ["gl.update_buffer_object(${1:value}, ${2:ssbo}, ${3:offset}, ${4:existing}, ${5:dyn})"],
        "description": "gl.update_buffer_object(value:string, ssbo:int, offset:int, existing:resource<bufferobject>, dyn:bool) -> resource<bufferobject> \n creates a uniform buffer object ssbo indicates if you want a shader storage block instead. returns buffer id or 0 on error."
    },
    
    "gl.bind_buffer_object": {
        "scope": "lobster",
        "prefix": "gl.bind_buffer_object",
        "body": ["gl.bind_buffer_object(${1:name}, ${2:bo})"],
        "description": "gl.bind_buffer_object(name:string, bo:resource<bufferobject>) -> int \n attaches an existing bo to the current shader at the given uniform block name. uniforms in the shader can be any type, as long as it matches the data layout in the string buffer. returns false for error."
    },
    
    "gl.copy_buffer_object": {
        "scope": "lobster",
        "prefix": "gl.copy_buffer_object",
        "body": ["gl.copy_buffer_object(${1:source}, ${2:destination}, ${3:srcoffset}, ${4:dstoffset}, ${5:length})"],
        "description": "gl.copy_buffer_object(source:resource<bufferobject>, destination:resource<bufferobject>, srcoffset:int, dstoffset:int, length:int) \n copies the source buffer object into the destination buffer object"
    },
    
    "gl.bind_mesh_to_compute": {
        "scope": "lobster",
        "prefix": "gl.bind_mesh_to_compute",
        "body": ["gl.bind_mesh_to_compute(${1:mesh}, ${2:name})"],
        "description": "gl.bind_mesh_to_compute(mesh:resource<mesh>, name:string) \n Bind the vertex data of a mesh to a SSBO binding of a compute shader. Pass a nil mesh to unbind."
    },
    
    "gl.dispatch_compute": {
        "scope": "lobster",
        "prefix": "gl.dispatch_compute",
        "body": ["gl.dispatch_compute(${1:groups})"],
        "description": "gl.dispatch_compute(groups:int3) \n dispatches the currently set compute shader in groups of sizes of the specified x/y/z values."
    },
    
    "gl.dump_shader": {
        "scope": "lobster",
        "prefix": "gl.dump_shader",
        "body": ["gl.dump_shader(${1:filename}, ${2:stripnonascii})"],
        "description": "gl.dump_shader(filename:string, stripnonascii:bool) -> int \n Dumps the compiled (binary) version of the current shader to a file. Contents are driver dependent. On Nvidia hardware it contains the assembly version of the shader as text, pass true for stripnonascii if you're only interested in that part."
    },
    
    "gl.blend": {
        "scope": "lobster",
        "prefix": "gl.blend",
        "body": ["gl.blend(${1:on})"],
        "description": "gl.blend(on:int) -> int \n changes the blending mode (use blending constants from color.lobster), returns old mode"
    },
    
    "gl.load_texture": {
        "scope": "lobster",
        "prefix": "gl.load_texture",
        "body": ["gl.load_texture(${1:name}, ${2:textureformat})"],
        "description": "gl.load_texture(name:string, textureformat:int = 0) -> resource<texture>? \n returns texture if succesfully loaded from file name, otherwise nil. see texture.lobster for texture format. If textureformat includes cubemap, will load 6 images with "_ft" etc inserted before the "." in the filename. Uses stb_image internally (see http://nothings.org/), loads JPEG Baseline, subsets of PNG, TGA, BMP, PSD, GIF, HDR, PIC."
    },
    
    "gl.save_texture": {
        "scope": "lobster",
        "prefix": "gl.save_texture",
        "body": ["gl.save_texture(${1:tex}, ${2:filename}, ${3:flip})"],
        "description": "gl.save_texture(tex:resource<texture>, filename:string, flip:bool = false) -> int \n saves the texture in .png format, returns true if succesful"
    },
    
    "gl.set_primitive_texture": {
        "scope": "lobster",
        "prefix": "gl.set_primitive_texture",
        "body": ["gl.set_primitive_texture(${1:i}, ${2:tex})"],
        "description": "gl.set_primitive_texture(i:int, tex:resource<texture>) \n sets texture unit i to texture (for use with rect/circle/polygon/line)"
    },
    
    "gl.set_mesh_texture": {
        "scope": "lobster",
        "prefix": "gl.set_mesh_texture",
        "body": ["gl.set_mesh_texture(${1:mesh}, ${2:part}, ${3:i}, ${4:texture})"],
        "description": "gl.set_mesh_texture(mesh:resource<mesh>, part:int, i:int, texture:resource<texture>) \n sets texture unit i to texture for a mesh and part (0 if not a multi-part mesh)"
    },
    
    "gl.set_image_texture": {
        "scope": "lobster",
        "prefix": "gl.set_image_texture",
        "body": ["gl.set_image_texture(${1:i}, ${2:tex}, ${3:level}, ${4:accessflags})"],
        "description": "gl.set_image_texture(i:int, tex:resource<texture>, level:int, accessflags:int = 0) \n sets image unit i to texture (for use with compute). optionally specify writeonly/readwrite flags."
    },
    
    "gl.unbind_all_textures": {
        "scope": "lobster",
        "prefix": "gl.unbind_all_textures",
        "body": ["gl.unbind_all_textures()"],
        "description": "gl.unbind_all_textures() \n unbinds all textures set thru any set texture calls. typically not needed to call this manually, but may sometimes be needed when reusing textures across draw/compute calls"
    },
    
    "gl.create_texture": {
        "scope": "lobster",
        "prefix": "gl.create_texture",
        "body": ["gl.create_texture(${1:matrix}, ${2:textureformat})"],
        "description": "gl.create_texture(matrix:[[float4]], textureformat:int = 0) -> resource<texture> \n creates a texture from a 2d array of color vectors. see texture.lobster for texture format. for a cubemap, pass an array that is 6x as big on x than y"
    },
    
    "gl.create_texture_single_channel": {
        "scope": "lobster",
        "prefix": "gl.create_texture_single_channel",
        "body": ["gl.create_texture_single_channel(${1:matrix}, ${2:textureformat})"],
        "description": "gl.create_texture_single_channel(matrix:[[float]], textureformat:int = 0) -> resource<texture> \n creates a texture from a 2d array of float vectors. see texture.lobster for texture format. for a cubemap, pass an array that is 6x as big on x than y"
    },
    
    "gl.create_blank_texture": {
        "scope": "lobster",
        "prefix": "gl.create_blank_texture",
        "body": ["gl.create_blank_texture(${1:size}, ${2:textureformat})"],
        "description": "gl.create_blank_texture(size:int3, textureformat:int = 0) -> resource<texture> \n creates a blank texture (for use as frame buffer or with compute shaders). see texture.lobster for texture format"
    },
    
    "gl.create_colored_texture": {
        "scope": "lobster",
        "prefix": "gl.create_colored_texture",
        "body": ["gl.create_colored_texture(${1:size}, ${2:color}, ${3:textureformat})"],
        "description": "gl.create_colored_texture(size:int3, color:float4, textureformat:int = 0) -> resource<texture> \n creates a colored texture (for use as frame buffer or with compute shaders). see texture.lobster for texture format"
    },
    
    "gl.texture_size": {
        "scope": "lobster",
        "prefix": "gl.texture_size",
        "body": ["gl.texture_size(${1:tex})"],
        "description": "gl.texture_size(tex:resource<texture>) -> int2 \n returns the size of a texture"
    },
    
    "gl.read_texture": {
        "scope": "lobster",
        "prefix": "gl.read_texture",
        "body": ["gl.read_texture(${1:tex})"],
        "description": "gl.read_texture(tex:resource<texture>) -> string? \n read back RGBA texture data into a string or nil on failure"
    },
    
    "gl.generate_texture_mipmap": {
        "scope": "lobster",
        "prefix": "gl.generate_texture_mipmap",
        "body": ["gl.generate_texture_mipmap(${1:tex})"],
        "description": "gl.generate_texture_mipmap(tex:resource<texture> = nil) \n generate mipmaps for the specified texture"
    },
    
    "gl.set_texture_flags": {
        "scope": "lobster",
        "prefix": "gl.set_texture_flags",
        "body": ["gl.set_texture_flags(${1:tex}, ${2:tf})"],
        "description": "gl.set_texture_flags(tex:resource<texture>, tf:int) \n change texture filter/wrap/clamp flags on an existing texture"
    },
    
    "gl.switch_to_framebuffer": {
        "scope": "lobster",
        "prefix": "gl.switch_to_framebuffer",
        "body": ["gl.switch_to_framebuffer(${1:tex}, ${2:hasdepth}, ${3:multisampleformat}, ${4:resolvetex}, ${5:depthtex})"],
        "description": "gl.switch_to_framebuffer(tex:resource<texture> = nil, hasdepth:int = 0, multisampleformat:int = 0, resolvetex:resource<texture> = nil, depthtex:resource<texture> = nil) -> int \n switches to a new framebuffer, that renders into the given texture. also allocates a depth buffer for it if depth is true. pass the multisample flags that was used for this texture. pass a resolve texture if the base texture is multisample. pass your own depth texture if desired. pass a nil texture to switch back to the original framebuffer. performance note: do not recreate texture passed in unless necessary."
    },
    
    "gl.framebuffer_size": {
        "scope": "lobster",
        "prefix": "gl.framebuffer_size",
        "body": ["gl.framebuffer_size() -> int2"],
        "description": "gl.framebuffer_size() -> int2 \n a vector representing the size (in pixels) of the framebuffer, according to the last call to gl.switch_to_framebuffer, or same as gl.window_size otherwise"
    },
    
    "gl.light": {
        "scope": "lobster",
        "prefix": "gl.light",
        "body": ["gl.light(${1:pos}, ${2:params})"],
        "description": "gl.light(pos:float3, params:float2) \n sets up a light at the given position for this frame. make sure to call this after your camera transforms but before any object transforms (i.e. defined in "worldspace"). params contains specular exponent in x (try 32/64/128 for different material looks) and the specular scale in y (try 1 for full intensity)"
    },
    
    "gl.render_tiles": {
        "scope": "lobster",
        "prefix": "gl.render_tiles",
        "body": ["gl.render_tiles(${1:positions}, ${2:tilecoords}, ${3:mapsize})"],
        "description": "gl.render_tiles(positions:[float2], tilecoords:[int2], mapsize:int2) \n Renders a list of tiles from a tilemap. Each tile rendered is 1x1 in size. Positions may be anywhere. tilecoords are indices into the map (0..mapsize-1), mapsize is the amount of tiles in the texture. Tiles may overlap, they are drawn in order. Before calling this, make sure to have the texture set and a textured shader"
    },
    
    "gl.debug_grid": {
        "scope": "lobster",
        "prefix": "gl.debug_grid",
        "body": ["gl.debug_grid(${1:num}, ${2:dist}, ${3:thickness})"],
        "description": "gl.debug_grid(num:int3, dist:float3, thickness:float) \n renders a grid in space for debugging purposes. num is the number of lines in all 3 directions, and dist their spacing. thickness of the lines in the same units"
    },
    
    "gl.screenshot": {
        "scope": "lobster",
        "prefix": "gl.screenshot",
        "body": ["gl.screenshot(${1:filename})"],
        "description": "gl.screenshot(filename:string) -> int \n saves a screenshot in .png format, returns true if succesful"
    },
    
    "gl.dropped_file": {
        "scope": "lobster",
        "prefix": "gl.dropped_file",
        "body": ["gl.dropped_file() -> string"],
        "description": "gl.dropped_file() -> string \n if a file was dropped on the window this frame, the filename, otherwise empty"
    },
    
    "gl.create_time_query": {
        "scope": "lobster",
        "prefix": "gl.create_time_query",
        "body": ["gl.create_time_query() -> resource<timequery>"],
        "description": "gl.create_time_query() -> resource<timequery> \n creates a time query object used for profiling GPU events"
    },
    
    "gl.start_time_query": {
        "scope": "lobster",
        "prefix": "gl.start_time_query",
        "body": ["gl.start_time_query(${1:tq})"],
        "description": "gl.start_time_query(tq:resource<timequery> = nil) \n starts the time query"
    },
    
    "gl.stop_time_query": {
        "scope": "lobster",
        "prefix": "gl.stop_time_query",
        "body": ["gl.stop_time_query(${1:tq})"],
        "description": "gl.stop_time_query(tq:resource<timequery> = nil) -> float \n stops the time query and returns the result"
    },
    
    "gl.init_controller_database": {
        "scope": "lobster",
        "prefix": "gl.init_controller_database",
        "body": ["gl.init_controller_database(${1:filename})"],
        "description": "gl.init_controller_database(filename:string) -> string? \n loads the controller database if you want your game to support controllers. typically the argument should be: pakfile \"data/controllers/gamecontrollerdb.txt\". returns error if something went wrong"
    },
    
    "gl.open_url": {
        "scope": "lobster",
        "prefix": "gl.open_url",
        "body": ["gl.open_url(${1:url})"],
        "description": "gl.open_url(url:string) -> int \n Opens a URL in the system browser, returns true if successful"
    },
    
    "gl.set_font_name": {
        "scope": "lobster",
        "prefix": "gl.set_font_name",
        "body": ["gl.set_font_name(${1:filename})"],
        "description": "gl.set_font_name(filename:string) -> int \n sets a freetype/OTF/TTF font as current (and loads it from disk the first time). returns true if success."
    },
    
    "gl.set_font_size": {
        "scope": "lobster",
        "prefix": "gl.set_font_size",
        "body": ["gl.set_font_size(${1:size}, ${2:outlinesize})"],
        "description": "gl.set_font_size(size:int, outlinesize:float = 0.000000) -> int \n sets the font for rendering into this fontsize (in pixels). caches into a texture first time this size is used, flushes from cache if this size is not used an entire frame. font rendering will look best if using 1:1 pixels (careful with gl.scale/gl.translate). an optional outlinesize will give the font a black outline. make sure to call this every frame. returns true if success"
    },
    
    "gl.set_max_font_size": {
        "scope": "lobster",
        "prefix": "gl.set_max_font_size",
        "body": ["gl.set_max_font_size(${1:size})"],
        "description": "gl.set_max_font_size(size:int) \n sets the max font size to render to bitmaps. any sizes specified over that by setfontsize will still work but cause scaled rendering. default 256"
    },
    
    "gl.get_font_size": {
        "scope": "lobster",
        "prefix": "gl.get_font_size",
        "body": ["gl.get_font_size() -> int"],
        "description": "gl.get_font_size() -> int \n the current font size"
    },
    
    "gl.get_outline_size": {
        "scope": "lobster",
        "prefix": "gl.get_outline_size",
        "body": ["gl.get_outline_size() -> float"],
        "description": "gl.get_outline_size() -> float \n the current font size"
    },
    
    "gl.text": {
        "scope": "lobster",
        "prefix": "gl.text",
        "body": ["gl.text(${1:text})"],
        "description": "gl.text(text:string) -> string \n renders a text with the current font (at the current coordinate origin)"
    },
    
    "gl.text_size": {
        "scope": "lobster",
        "prefix": "gl.text_size",
        "body": ["gl.text_size(${1:text})"],
        "description": "gl.text_size(text:string) -> int2 \n the x/y size in pixels the given text would need"
    },
    
    "gl.get_glyph_name": {
        "scope": "lobster",
        "prefix": "gl.get_glyph_name",
        "body": ["gl.get_glyph_name(${1:i})"],
        "description": "gl.get_glyph_name(i:int) -> string \n the name of a glyph index, or empty string if the font doesn't have names"
    },
    
    "gl.get_char_code": {
        "scope": "lobster",
        "prefix": "gl.get_char_code",
        "body": ["gl.get_char_code(${1:name})"],
        "description": "gl.get_char_code(name:string) -> int \n the char code of a glyph by specifying its name, or 0 if it can not be found (or if the font doesn't have names)"
    },
    
    "play_wav": {
        "scope": "lobster",
        "prefix": "play_wav",
        "body": ["play_wav(${1:filename}, ${2:loops}, ${3:prio})"],
        "description": "play_wav(filename:string, loops:int = 0, prio:int = 0) -> int \n plays a sound defined by a wav file (RAW or MS-ADPCM, any bitrate other than 22050hz 16bit will automatically be converted on first load). the default volume is the max volume (1.0) loops is the number of repeats to play (-1 repeats endlessly, omit for no repeats). prio is the priority of the sound which determines whether it can be deleted or not in case of too many play function calls (defaults to 0) returns the assigned channel number (1..8) or 0 on error"
    },
    
    "load_wav": {
        "scope": "lobster",
        "prefix": "load_wav",
        "body": ["load_wav(${1:filename})"],
        "description": "load_wav(filename:string) -> int \n loads a sound the same way play_sound does, but ahead of playback, to avoid any delays later. returns false on error"
    },
    
    "play_sfxr": {
        "scope": "lobster",
        "prefix": "play_sfxr",
        "body": ["play_sfxr(${1:filename}, ${2:loops}, ${3:prio})"],
        "description": "play_sfxr(filename:string, loops:int = 0, prio:int = 0) -> int \n plays a synth sound defined by a .sfs file (use http://www.drpetter.se/project_sfxr.html to generate these). the default volume is the max volume (1.0) loops is the number of repeats to play (-1 repeats endlessly, omit for no repeats). prio is the priority of the sound which determines whether it can be deleted or not in case of too many play function calls (defaults to 0) returns the assigned channel number (1..8) or 0 on error"
    },
    
    "load_sfxr": {
        "scope": "lobster",
        "prefix": "load_sfxr",
        "body": ["load_sfxr(${1:filename})"],
        "description": "load_sfxr(filename:string) -> int \n loads a sound the same way play_sfxr does, but ahead of playback, to avoid any delays later. returns false on error"
    },
    
    "play_ogg": {
        "scope": "lobster",
        "prefix": "play_ogg",
        "body": ["play_ogg(${1:filename}, ${2:loops}, ${3:prio})"],
        "description": "play_ogg(filename:string, loops:int = 0, prio:int = 0) -> int \n plays an ogg file. the default volume is the max volume (1.0) loops is the number of repeats to play (-1 repeats endlessly, omit for no repeats). prio is the priority of the sound which determines whether it can be deleted or not in case of too many play function calls (defaults to 0) returns the assigned channel number (1..8) or 0 on error"
    },
    
    "load_ogg": {
        "scope": "lobster",
        "prefix": "load_ogg",
        "body": ["load_ogg(${1:filename})"],
        "description": "load_ogg(filename:string) -> int \n loads a sound the same way play_ogg does, but ahead of playback, to avoid any delays later. returns false on error"
    },
    
    "sound_status": {
        "scope": "lobster",
        "prefix": "sound_status",
        "body": ["sound_status(${1:channel})"],
        "description": "sound_status(channel:int) -> int \n provides the status of the specified sound channel. returns -1 on error or if the channel does not exist, 0 if the channel is free, 1 if it is playing, and 2 if the channel is active but paused."
    },
    
    "sound_halt": {
        "scope": "lobster",
        "prefix": "sound_halt",
        "body": ["sound_halt(${1:channel})"],
        "description": "sound_halt(channel:int) \n terminates a specific sound channel."
    },
    
    "sound_pause": {
        "scope": "lobster",
        "prefix": "sound_pause",
        "body": ["sound_pause(${1:channel})"],
        "description": "sound_pause(channel:int) \n pauses the specified sound channel."
    },
    
    "sound_resume": {
        "scope": "lobster",
        "prefix": "sound_resume",
        "body": ["sound_resume(${1:channel})"],
        "description": "sound_resume(channel:int) \n resumes a sound that was paused."
    },
    
    "sound_volume": {
        "scope": "lobster",
        "prefix": "sound_volume",
        "body": ["sound_volume(${1:channel}, ${2:volume})"],
        "description": "sound_volume(channel:int, volume:float) \n sets the channel volume in the range 0..1."
    },
    
    "sound_position": {
        "scope": "lobster",
        "prefix": "sound_position",
        "body": ["sound_position(${1:channel}, ${2:vecfromlistener}, ${3:listenerfwd}, ${4:attnscale})"],
        "description": "sound_position(channel:int, vecfromlistener:float3, listenerfwd:float3, attnscale:float) \n sets the channel volume and panning according to sound in a game world relative to the listener."
    },
    
    "sound_time_length": {
        "scope": "lobster",
        "prefix": "sound_time_length",
        "body": ["sound_time_length(${1:channel})"],
        "description": "sound_time_length(channel:int) -> float \n returns the length in seconds of the sound playing on this channel"
    },
    
    "text_to_speech": {
        "scope": "lobster",
        "prefix": "text_to_speech",
        "body": ["text_to_speech(${1:text})"],
        "description": "text_to_speech(text:string) \n Queues up text for async text to speech output. Currently on: win32"
    },
    
    "text_to_speech_stop": {
        "scope": "lobster",
        "prefix": "text_to_speech_stop",
        "body": ["text_to_speech_stop()"],
        "description": "text_to_speech_stop() \n Stops current text to speech output and clears queue"
    },
    
    "play_music": {
        "scope": "lobster",
        "prefix": "play_music",
        "body": ["play_music(${1:filename}, ${2:loops})"],
        "description": "play_music(filename:string, loops:int = 0) -> int \n plays music in many common formats (WAV, MP3, OGG, etc.). the default volume is the max volume (1.0) loops is the number of repeats to play (-1 repeats endlessly, omit for no repeats). returns the music id or 0 on error"
    },
    
    "play_music_fade_in": {
        "scope": "lobster",
        "prefix": "play_music_fade_in",
        "body": ["play_music_fade_in(${1:filename}, ${2:ms}, ${3:loops})"],
        "description": "play_music_fade_in(filename:string, ms:int, loops:int = 0) -> int \n plays music while fading in over ms milliseconds. See play_music for more info."
    },
    
    "play_music_cross_fade": {
        "scope": "lobster",
        "prefix": "play_music_cross_fade",
        "body": ["play_music_cross_fade(${1:old_mus_id}, ${2:new_filename}, ${3:ms}, ${4:loops})"],
        "description": "play_music_cross_fade(old_mus_id:int, new_filename:string, ms:int, loops:int = 0) -> int \n cross-fades new music with existing music over ms milliseconds. See play_music for more info."
    },
    
    "music_fade_out": {
        "scope": "lobster",
        "prefix": "music_fade_out",
        "body": ["music_fade_out(${1:mus_id}, ${2:ms})"],
        "description": "music_fade_out(mus_id:int, ms:int) \n fade out music over ms milliseconds."
    },
    
    "music_halt": {
        "scope": "lobster",
        "prefix": "music_halt",
        "body": ["music_halt(${1:mus_id})"],
        "description": "music_halt(mus_id:int) \n stop music with the given id."
    },
    
    "music_pause": {
        "scope": "lobster",
        "prefix": "music_pause",
        "body": ["music_pause(${1:mus_id})"],
        "description": "music_pause(mus_id:int) \n pause music with the given id."
    },
    
    "music_resume": {
        "scope": "lobster",
        "prefix": "music_resume",
        "body": ["music_resume(${1:mus_id})"],
        "description": "music_resume(mus_id:int) \n resume music with the given id."
    },
    
    "music_volume": {
        "scope": "lobster",
        "prefix": "music_volume",
        "body": ["music_volume(${1:mus_id}, ${2:vol})"],
        "description": "music_volume(mus_id:int, vol:float) \n set the music volume in the range 0..1."
    },
    
    "music_is_playing": {
        "scope": "lobster",
        "prefix": "music_is_playing",
        "body": ["music_is_playing(${1:mus_id})"],
        "description": "music_is_playing(mus_id:int) -> int \n returns whether the music with the given id has not yet finished. Paused music is still considered to be playing"
    },
    
    "music_set_general_volume": {
        "scope": "lobster",
        "prefix": "music_set_general_volume",
        "body": ["music_set_general_volume(${1:vol})"],
        "description": "music_set_general_volume(vol:float) \n set the general music volume in the range 0..1."
    },
    
    "ph.initialize": {
        "scope": "lobster",
        "prefix": "ph.initialize",
        "body": ["ph.initialize(${1:gravityvector})"],
        "description": "ph.initialize(gravityvector:float2) \n initializes or resets the physical world, gravity typically [0, -10]."
    },
    
    "ph.create_box": {
        "scope": "lobster",
        "prefix": "ph.create_box",
        "body": ["ph.create_box(${1:position}, ${2:size}, ${3:offset}, ${4:rotation}, ${5:attachto})"],
        "description": "ph.create_box(position:float2, size:float2, offset:float2 = nil, rotation:float = 0.000000, attachto:resource<fixture> = nil) -> resource<fixture> \n creates a physical box shape in the world at position, with size the half-extends around the center, offset from the center if needed, at a particular rotation (in degrees). attachto is a previous physical object to attach this one to, to become a combined physical body."
    },
    
    "ph.create_circle": {
        "scope": "lobster",
        "prefix": "ph.create_circle",
        "body": ["ph.create_circle(${1:position}, ${2:radius}, ${3:offset}, ${4:attachto})"],
        "description": "ph.create_circle(position:float2, radius:float, offset:float2 = nil, attachto:resource<fixture> = nil) -> resource<fixture> \n creates a physical circle shape in the world at position, with the given radius, offset from the center if needed. attachto is a previous physical object to attach this one to, to become a combined physical body."
    },
    
    "ph.create_polygon": {
        "scope": "lobster",
        "prefix": "ph.create_polygon",
        "body": ["ph.create_polygon(${1:position}, ${2:vertices}, ${3:attachto})"],
        "description": "ph.create_polygon(position:float2, vertices:[float2], attachto:resource<fixture> = nil) -> resource<fixture> \n creates a polygon circle shape in the world at position, with the given list of vertices. attachto is a previous physical object to attach this one to, to become a combined physical body."
    },
    
    "ph.dynamic": {
        "scope": "lobster",
        "prefix": "ph.dynamic",
        "body": ["ph.dynamic(${1:shape}, ${2:on})"],
        "description": "ph.dynamic(shape:resource<fixture>, on:bool) \n makes a shape dynamic (on = true) or not."
    },
    
    "ph.set_linear_velocity": {
        "scope": "lobster",
        "prefix": "ph.set_linear_velocity",
        "body": ["ph.set_linear_velocity(${1:id}, ${2:velocity})"],
        "description": "ph.set_linear_velocity(id:resource<fixture>, velocity:float2) \n sets the linear velocity of a shape's center of mass."
    },
    
    "ph.apply_linear_impulse_to_center": {
        "scope": "lobster",
        "prefix": "ph.apply_linear_impulse_to_center",
        "body": ["ph.apply_linear_impulse_to_center(${1:id}, ${2:impulse})"],
        "description": "ph.apply_linear_impulse_to_center(id:resource<fixture>, impulse:float2) \n applies a linear impulse to a shape at its center of mass."
    },
    
    "ph.set_color": {
        "scope": "lobster",
        "prefix": "ph.set_color",
        "body": ["ph.set_color(${1:id}, ${2:color})"],
        "description": "ph.set_color(id:resource<fixture>, color:float4) \n sets a shape (or nil for particles) to be rendered with a particular color."
    },
    
    "ph.set_shader": {
        "scope": "lobster",
        "prefix": "ph.set_shader",
        "body": ["ph.set_shader(${1:id}, ${2:shadername})"],
        "description": "ph.set_shader(id:resource<fixture>, shadername:string) \n sets a shape (or nil for particles) to be rendered with a particular shader."
    },
    
    "ph.set_texture": {
        "scope": "lobster",
        "prefix": "ph.set_texture",
        "body": ["ph.set_texture(${1:id}, ${2:tex}, ${3:texunit})"],
        "description": "ph.set_texture(id:resource<fixture>, tex:resource<texture>, texunit:int = 0) \n sets a shape (or nil for particles) to be rendered with a particular texture (assigned to a texture unit, default 0)."
    },
    
    "ph.get_position": {
        "scope": "lobster",
        "prefix": "ph.get_position",
        "body": ["ph.get_position(${1:id})"],
        "description": "ph.get_position(id:resource<fixture>) -> float2 \n gets a shape's position."
    },
    
    "ph.get_mass": {
        "scope": "lobster",
        "prefix": "ph.get_mass",
        "body": ["ph.get_mass(${1:id})"],
        "description": "ph.get_mass(id:resource<fixture>) -> float \n gets a shape's mass."
    },
    
    "ph.create_particle": {
        "scope": "lobster",
        "prefix": "ph.create_particle",
        "body": ["ph.create_particle(${1:position}, ${2:velocity}, ${3:color}, ${4:flags})"],
        "description": "ph.create_particle(position:float2, velocity:float2, color:float4, flags:int = 0) -> int \n creates an individual particle. For flags, see include/physics.lobster"
    },
    
    "ph.create_particle_circle": {
        "scope": "lobster",
        "prefix": "ph.create_particle_circle",
        "body": ["ph.create_particle_circle(${1:position}, ${2:radius}, ${3:color}, ${4:flags})"],
        "description": "ph.create_particle_circle(position:float2, radius:float, color:float4, flags:int = 0) \n creates a circle filled with particles. For flags, see include/physics.lobster"
    },
    
    "ph.initialize_particles": {
        "scope": "lobster",
        "prefix": "ph.initialize_particles",
        "body": ["ph.initialize_particles(${1:radius})"],
        "description": "ph.initialize_particles(radius:float) \n initializes the particle system with a given particle radius."
    },
    
    "ph.step": {
        "scope": "lobster",
        "prefix": "ph.step",
        "body": ["ph.step(${1:seconds}, ${2:viter}, ${3:piter})"],
        "description": "ph.step(seconds:float, viter:int, piter:int) \n simulates the physical world for the given period (try: gl.delta_time()). You can specify the amount of velocity/position iterations per step, more means more accurate but also more expensive computationally (try 8 and 3)."
    },
    
    "ph.particle_contacts": {
        "scope": "lobster",
        "prefix": "ph.particle_contacts",
        "body": ["ph.particle_contacts(${1:id})"],
        "description": "ph.particle_contacts(id:resource<fixture>) -> [int] \n gets the particle indices that are currently contacting a giving physics object. Call after step(). Indices may be invalid after next step()."
    },
    
    "ph.raycast": {
        "scope": "lobster",
        "prefix": "ph.raycast",
        "body": ["ph.raycast(${1:p1}, ${2:p2}, ${3:n})"],
        "description": "ph.raycast(p1:float2, p2:float2, n:int) -> [int] \n returns a vector of the first n particle ids that intersect a ray from p1 to p2, not including particles that overlap p1."
    },
    
    "ph.delete_particle": {
        "scope": "lobster",
        "prefix": "ph.delete_particle",
        "body": ["ph.delete_particle(${1:i})"],
        "description": "ph.delete_particle(i:int) \n deletes given particle. Deleting particles causes indices to be invalidated at next step()."
    },
    
    "ph.getparticle_position": {
        "scope": "lobster",
        "prefix": "ph.getparticle_position",
        "body": ["ph.getparticle_position(${1:i})"],
        "description": "ph.getparticle_position(i:int) -> float2 \n gets a particle's position."
    },
    
    "ph.render": {
        "scope": "lobster",
        "prefix": "ph.render",
        "body": ["ph.render()"],
        "description": "ph.render() \n renders all rigid body objects."
    },
    
    "ph.render_particles": {
        "scope": "lobster",
        "prefix": "ph.render_particles",
        "body": ["ph.render_particles(${1:scale})"],
        "description": "ph.render_particles(scale:float) \n render all particles, with the given scale."
    },
    
    "simplex": {
        "scope": "lobster",
        "prefix": "simplex",
        "body": ["simplex(${1:pos}, ${2:octaves}, ${3:scale}, ${4:persistence})"],
        "description": "simplex(pos:vec_f, octaves:int, scale:float, persistence:float) -> float \n returns a simplex noise value [-1..1] given a 2D/3D or 4D location, the number of octaves (try 8), a scale (try 1), and persistence from one octave to the next (try 0.5)"
    },
    
    "simplex_raw": {
        "scope": "lobster",
        "prefix": "simplex_raw",
        "body": ["simplex_raw(${1:pos})"],
        "description": "simplex_raw(pos:vec_f) -> float \n returns a simplex noise value [-1..1] given a 2D/3D or 4D location"
    },
    
    "mg.sphere": {
        "scope": "lobster",
        "prefix": "mg.sphere",
        "body": ["mg.sphere(${1:radius})"],
        "description": "mg.sphere(radius:float) \n a sphere"
    },
    
    "mg.cube": {
        "scope": "lobster",
        "prefix": "mg.cube",
        "body": ["mg.cube(${1:extents})"],
        "description": "mg.cube(extents:float3) \n a cube (extents are size from center)"
    },
    
    "mg.cylinder": {
        "scope": "lobster",
        "prefix": "mg.cylinder",
        "body": ["mg.cylinder(${1:radius}, ${2:height})"],
        "description": "mg.cylinder(radius:float, height:float) \n a unit cylinder (height is from center)"
    },
    
    "mg.tapered_cylinder": {
        "scope": "lobster",
        "prefix": "mg.tapered_cylinder",
        "body": ["mg.tapered_cylinder(${1:bot}, ${2:top}, ${3:height})"],
        "description": "mg.tapered_cylinder(bot:float, top:float, height:float) \n a cyclinder where you specify the top and bottom radius (height is from center)"
    },
    
    "mg.superquadric": {
        "scope": "lobster",
        "prefix": "mg.superquadric",
        "body": ["mg.superquadric(${1:exponents}, ${2:scale})"],
        "description": "mg.superquadric(exponents:float3, scale:float3) \n a super quadric. specify an exponent of 2 for spherical, higher values for rounded squares"
    },
    
    "mg.superquadric_non_uniform": {
        "scope": "lobster",
        "prefix": "mg.superquadric_non_uniform",
        "body": ["mg.superquadric_non_uniform(${1:posexponents}, ${2:negexponents}, ${3:posscale}, ${4:negscale})"],
        "description": "mg.superquadric_non_uniform(posexponents:float3, negexponents:float3, posscale:float3, negscale:float3) \n a superquadric that allows you to specify exponents and sizes in all 6 directions independently for maximum modelling possibilities"
    },
    
    "mg.supertoroid": {
        "scope": "lobster",
        "prefix": "mg.supertoroid",
        "body": ["mg.supertoroid(${1:R}, ${2:exponents})"],
        "description": "mg.supertoroid(R:float, exponents:float3) \n a super toroid. R is the distance from the origin to the center of the ring."
    },
    
    "mg.landscape": {
        "scope": "lobster",
        "prefix": "mg.landscape",
        "body": ["mg.landscape(${1:zscale}, ${2:xyscale})"],
        "description": "mg.landscape(zscale:float, xyscale:float) \n a simplex landscape of unit size"
    },
    
    "mg.set_polygon_reduction": {
        "scope": "lobster",
        "prefix": "mg.set_polygon_reduction",
        "body": ["mg.set_polygon_reduction(${1:polyreductionpasses}, ${2:epsilon}, ${3:maxtricornerdot})"],
        "description": "mg.set_polygon_reduction(polyreductionpasses:int, epsilon:float, maxtricornerdot:float) \n controls the polygon reduction algorithm. set polyreductionpasses to 0 for off, 100 for max compression, or low values for generation speed or to keep the mesh uniform. epsilon determines how flat adjacent triangles must be to be reduced, use 0.98 as a good tradeoff, lower to get more compression. maxtricornerdot avoid very thin triangles, use 0.95 as a good tradeoff, up to 0.99 to get more compression"
    },
    
    "mg.set_color_noise": {
        "scope": "lobster",
        "prefix": "mg.set_color_noise",
        "body": ["mg.set_color_noise(${1:noiseintensity}, ${2:noisestretch})"],
        "description": "mg.set_color_noise(noiseintensity:float, noisestretch:float) \n applies simplex noise to the colors of the model. try 0.3 for intensity. stretch scales the pattern over the model"
    },
    
    "mg.set_vertex_randomize": {
        "scope": "lobster",
        "prefix": "mg.set_vertex_randomize",
        "body": ["mg.set_vertex_randomize(${1:factor})"],
        "description": "mg.set_vertex_randomize(factor:float) \n randomizes all verts produced to give a more organic look and to hide the inherent messy polygons produced by the algorithm. try 0.15. note that any setting other than 0 will likely counteract the polygon reduction algorithm"
    },
    
    "mg.set_point_mode": {
        "scope": "lobster",
        "prefix": "mg.set_point_mode",
        "body": ["mg.set_point_mode(${1:on})"],
        "description": "mg.set_point_mode(on:bool) \n generates a point mesh instead of polygons"
    },
    
    "mg.polygonize": {
        "scope": "lobster",
        "prefix": "mg.polygonize",
        "body": ["mg.polygonize(${1:subdiv})"],
        "description": "mg.polygonize(subdiv:int) -> resource<mesh> \n returns a generated mesh from past mg commands. subdiv determines detail and number of polygons (relative to the largest dimension of the model), try 30.. 300 depending on the subject. values much higher than that will likely make you run out of memory (or take very long)."
    },
    
    "mg.convert_to_cubes": {
        "scope": "lobster",
        "prefix": "mg.convert_to_cubes",
        "body": ["mg.convert_to_cubes(${1:subdiv}, ${2:zoffset})"],
        "description": "mg.convert_to_cubes(subdiv:int, zoffset:int) -> resource<voxels> \n returns a cubegen block (see cg_ functions) from past mg commands. subdiv determines detail and number of cubes (relative to the largest dimension of the model)."
    },
    
    "mg.translate": {
        "scope": "lobster",
        "prefix": "mg.translate",
        "body": ["mg.translate(${1:vec})"],
        "description": "mg.translate(vec:float3) \n translates the current coordinate system along a vector"
    },
    
    "mg.scale": {
        "scope": "lobster",
        "prefix": "mg.scale",
        "body": ["mg.scale(${1:f})"],
        "description": "mg.scale(f:float) \n scales the current coordinate system by the given factor"
    },
    
    "mg.scale_vec": {
        "scope": "lobster",
        "prefix": "mg.scale_vec",
        "body": ["mg.scale_vec(${1:vec})"],
        "description": "mg.scale_vec(vec:float3) \n non-unimformly scales the current coordinate system using individual factors per axis"
    },
    
    "mg.rotate": {
        "scope": "lobster",
        "prefix": "mg.rotate",
        "body": ["mg.rotate(${1:axis}, ${2:angle})"],
        "description": "mg.rotate(axis:float3, angle:float) \n rotates using axis/angle"
    },
    
    "mg.color": {
        "scope": "lobster",
        "prefix": "mg.color",
        "body": ["mg.color(${1:color})"],
        "description": "mg.color(color:float4) \n sets the color, where an alpha of 1 means to add shapes to the scene (union), and 0 substracts them (carves)"
    },
    
    "mg.smooth": {
        "scope": "lobster",
        "prefix": "mg.smooth",
        "body": ["mg.smooth(${1:smooth})"],
        "description": "mg.smooth(smooth:float) \n sets the smoothness in terms of the range of distance from the shape smoothing happens, defaults to 1.0"
    },
    
    "mg.push_transform": {
        "scope": "lobster",
        "prefix": "mg.push_transform",
        "body": ["mg.push_transform()"],
        "description": "mg.push_transform() \n save the current state of the transform"
    },
    
    "mg.pop_transform": {
        "scope": "lobster",
        "prefix": "mg.pop_transform",
        "body": ["mg.pop_transform()"],
        "description": "mg.pop_transform() \n restore a previous state of the transform"
    },
    
    "cg.init": {
        "scope": "lobster",
        "prefix": "cg.init",
        "body": ["cg.init(${1:size})"],
        "description": "cg.init(size:int3) -> resource<voxels> \n initializes a new, empty 3D cube block. 1 byte per cell, careful with big sizes :) returns the block"
    },
    
    "cg.size": {
        "scope": "lobster",
        "prefix": "cg.size",
        "body": ["cg.size(${1:block})"],
        "description": "cg.size(block:resource<voxels>) -> int3 \n returns the current block size"
    },
    
    "cg.name": {
        "scope": "lobster",
        "prefix": "cg.name",
        "body": ["cg.name(${1:block})"],
        "description": "cg.name(block:resource<voxels>) -> string \n returns the current block name"
    },
    
    "cg.offset": {
        "scope": "lobster",
        "prefix": "cg.offset",
        "body": ["cg.offset(${1:block})"],
        "description": "cg.offset(block:resource<voxels>) -> int3 \n returns the current block offset"
    },
    
    "cg.set": {
        "scope": "lobster",
        "prefix": "cg.set",
        "body": ["cg.set(${1:block}, ${2:pos}, ${3:size}, ${4:paletteindex})"],
        "description": "cg.set(block:resource<voxels>, pos:int3, size:int3, paletteindex:int) \n sets a range of cubes to palette index. index 0 is considered empty space.Coordinates automatically clipped to the size of the grid"
    },
    
    "cg.get": {
        "scope": "lobster",
        "prefix": "cg.get",
        "body": ["cg.get(${1:block}, ${2:pos})"],
        "description": "cg.get(block:resource<voxels>, pos:int3) -> int \n sets a range of cubes to palette index. index 0 is considered empty space.Coordinates automatically clipped to the size of the grid"
    },
    
    "cg.copy": {
        "scope": "lobster",
        "prefix": "cg.copy",
        "body": ["cg.copy(${1:block}, ${2:pos}, ${3:size}, ${4:dest}, ${5:flip})"],
        "description": "cg.copy(block:resource<voxels>, pos:int3, size:int3, dest:int3, flip:int3) \n copy a range of cubes from pos to dest. flip can be 1 (regular copy), or -1 (mirror)for each component, indicating the step from dest. Coordinates automatically clipped to the size of the grid"
    },
    
    "cg.clone": {
        "scope": "lobster",
        "prefix": "cg.clone",
        "body": ["cg.clone(${1:block}, ${2:pos}, ${3:size})"],
        "description": "cg.clone(block:resource<voxels>, pos:int3, size:int3) -> resource<voxels> \n clone a range of cubes from pos to a new block. Coordinates automatically clipped to the size of the grid"
    },
    
    "cg.color_to_palette": {
        "scope": "lobster",
        "prefix": "cg.color_to_palette",
        "body": ["cg.color_to_palette(${1:block}, ${2:color})"],
        "description": "cg.color_to_palette(block:resource<voxels>, color:float4) -> int \n converts a color to a palette index. alpha < 0.5 is considered empty space. note: this is fast for the default palette, slow otherwise."
    },
    
    "cg.palette_to_color": {
        "scope": "lobster",
        "prefix": "cg.palette_to_color",
        "body": ["cg.palette_to_color(${1:block}, ${2:paletteindex})"],
        "description": "cg.palette_to_color(block:resource<voxels>, paletteindex:int) -> float4 \n converts a palette index to a color. empty space (index 0) will have 0 alpha"
    },
    
    "cg.get_palette": {
        "scope": "lobster",
        "prefix": "cg.get_palette",
        "body": ["cg.get_palette(${1:world})"],
        "description": "cg.get_palette(world:resource<voxels>) -> int \n "
    },
    
    "cg.set_palette": {
        "scope": "lobster",
        "prefix": "cg.set_palette",
        "body": ["cg.set_palette(${1:world}, ${2:palette_idx})"],
        "description": "cg.set_palette(world:resource<voxels>, palette_idx:int) \n "
    },
    
    "cg.load_palette": {
        "scope": "lobster",
        "prefix": "cg.load_palette",
        "body": ["cg.load_palette(${1:act_palette_file})"],
        "description": "cg.load_palette(act_palette_file:string) -> int \n "
    },
    
    "cg.sample_down": {
        "scope": "lobster",
        "prefix": "cg.sample_down",
        "body": ["cg.sample_down(${1:scale}, ${2:world})"],
        "description": "cg.sample_down(scale:int, world:resource<voxels>) \n "
    },
    
    "cg.scale_up": {
        "scope": "lobster",
        "prefix": "cg.scale_up",
        "body": ["cg.scale_up(${1:scale}, ${2:world})"],
        "description": "cg.scale_up(scale:int, world:resource<voxels>) -> resource<voxels> \n "
    },
    
    "cg.stretch": {
        "scope": "lobster",
        "prefix": "cg.stretch",
        "body": ["cg.stretch(${1:newsize}, ${2:world})"],
        "description": "cg.stretch(newsize:int3, world:resource<voxels>) -> resource<voxels> \n "
    },
    
    "cg.create_mesh": {
        "scope": "lobster",
        "prefix": "cg.create_mesh",
        "body": ["cg.create_mesh(${1:block})"],
        "description": "cg.create_mesh(block:resource<voxels>) -> resource<mesh> \n converts block to a mesh"
    },
    
    "cg.create_3d_texture": {
        "scope": "lobster",
        "prefix": "cg.create_3d_texture",
        "body": ["cg.create_3d_texture(${1:block}, ${2:textureformat}, ${3:monochrome})"],
        "description": "cg.create_3d_texture(block:resource<voxels>, textureformat:int, monochrome:int = 0) -> resource<texture> \n returns the new texture, for format, pass flags you want in addition to 3d|single_channel|has_mips"
    },
    
    "cg.load_vox": {
        "scope": "lobster",
        "prefix": "cg.load_vox",
        "body": ["cg.load_vox(${1:name}, ${2:material_palette})"],
        "description": "cg.load_vox(name:string, material_palette:int = 0) -> [resource<voxels>], string? \n loads a .vox file (supports both MagicaVoxel or VoxLap formats). if material_palette is true the alpha channel will contain material flags. returns vector of blocks or empty if file failed to load, and error string if any"
    },
    
    "cg.save_vox": {
        "scope": "lobster",
        "prefix": "cg.save_vox",
        "body": ["cg.save_vox(${1:block}, ${2:name})"],
        "description": "cg.save_vox(block:resource<voxels>, name:string) -> int \n saves a file in the .vox format (MagicaVoxel). returns false if file failed to save. this format can only save blocks < 256^3, will fail if bigger"
    },
    
    "cg.chunks_skipped": {
        "scope": "lobster",
        "prefix": "cg.chunks_skipped",
        "body": ["cg.chunks_skipped(${1:block})"],
        "description": "cg.chunks_skipped(block:resource<voxels>) -> int \n "
    },
    
    "cg.get_buf": {
        "scope": "lobster",
        "prefix": "cg.get_buf",
        "body": ["cg.get_buf(${1:block})"],
        "description": "cg.get_buf(block:resource<voxels>) -> string \n returns the data as a string of all palette indices, in z-major order"
    },
    
    "cg.average_surface_color": {
        "scope": "lobster",
        "prefix": "cg.average_surface_color",
        "body": ["cg.average_surface_color(${1:world})"],
        "description": "cg.average_surface_color(world:resource<voxels>) -> float3, int, int, int3, int3 \n "
    },
    
    "cg.average_face_colors": {
        "scope": "lobster",
        "prefix": "cg.average_face_colors",
        "body": ["cg.average_face_colors(${1:world})"],
        "description": "cg.average_face_colors(world:resource<voxels>) -> [float] \n returns a vector of 8 elements with 4 floats per face: color and alpha.last element contains the total average color and the average + max alpha in the last channel"
    },
    
    "cg.num_solid": {
        "scope": "lobster",
        "prefix": "cg.num_solid",
        "body": ["cg.num_solid(${1:world})"],
        "description": "cg.num_solid(world:resource<voxels>) -> int \n "
    },
    
    "cg.rotate": {
        "scope": "lobster",
        "prefix": "cg.rotate",
        "body": ["cg.rotate(${1:block}, ${2:n})"],
        "description": "cg.rotate(block:resource<voxels>, n:int) -> resource<voxels> \n returns a new block rotated by n 90 degree steps from the input"
    },
    
    "cg.simplex": {
        "scope": "lobster",
        "prefix": "cg.simplex",
        "body": ["cg.simplex(${1:block}, ${2:pos}, ${3:size}, ${4:spos}, ${5:ssize}, ${6:octaves}, ${7:scale}, ${8:persistence}, ${9:solidcol}, ${10:zscale}, ${11:zbias})"],
        "description": "cg.simplex(block:resource<voxels>, pos:int3, size:int3, spos:float3, ssize:float3, octaves:int, scale:float, persistence:float, solidcol:int, zscale:float, zbias:float) \n "
    },
    
    "cg.bounding_box": {
        "scope": "lobster",
        "prefix": "cg.bounding_box",
        "body": ["cg.bounding_box(${1:world}, ${2:minsolids})"],
        "description": "cg.bounding_box(world:resource<voxels>, minsolids:float) -> int3, int3 \n "
    },
    
    "cg.randomize": {
        "scope": "lobster",
        "prefix": "cg.randomize",
        "body": ["cg.randomize(${1:world}, ${2:rnd_range}, ${3:cutoff}, ${4:paletteindex}, ${5:filter})"],
        "description": "cg.randomize(world:resource<voxels>, rnd_range:int, cutoff:int, paletteindex:int, filter:int) \n "
    },
    
    "cg.erode": {
        "scope": "lobster",
        "prefix": "cg.erode",
        "body": ["cg.erode(${1:world}, ${2:minsolid}, ${3:maxsolid})"],
        "description": "cg.erode(world:resource<voxels>, minsolid:int, maxsolid:int) -> resource<voxels> \n "
    },
    
    "cg.normal_indices": {
        "scope": "lobster",
        "prefix": "cg.normal_indices",
        "body": ["cg.normal_indices(${1:block}, ${2:radius})"],
        "description": "cg.normal_indices(block:resource<voxels>, radius:int) -> resource<voxels> \n creates a new block with normal indices based on voxel surface shape.the indices refer to the associated pallette.empty voxels will have a 0 length normal.2 is a good radius that balances speed/quality, use 1 for speed, 3 for max quality"
    },
    
    "cg.load_image": {
        "scope": "lobster",
        "prefix": "cg.load_image",
        "body": ["cg.load_image(${1:name}, ${2:depth}, ${3:edge}, ${4:numtiles})"],
        "description": "cg.load_image(name:string, depth:int, edge:int, numtiles:int2) -> [resource<voxels>] \n loads an image file (same formats as gl.load_texture) and turns it into blocks. returns blocks or [] if file failed to load"
    },
    
    "cg.palette_storage_index": {
        "scope": "lobster",
        "prefix": "cg.palette_storage_index",
        "body": ["cg.palette_storage_index(${1:block})"],
        "description": "cg.palette_storage_index(block:resource<voxels>) -> int \n "
    },
    
    "cg.get_palette_storage_len": {
        "scope": "lobster",
        "prefix": "cg.get_palette_storage_len",
        "body": ["cg.get_palette_storage_len() -> int"],
        "description": "cg.get_palette_storage_len() -> int \n "
    },
    
    "cg.get_palette_storage_buf": {
        "scope": "lobster",
        "prefix": "cg.get_palette_storage_buf",
        "body": ["cg.get_palette_storage_buf() -> string"],
        "description": "cg.get_palette_storage_buf() -> string \n "
    },
    
    "vr.init": {
        "scope": "lobster",
        "prefix": "vr.init",
        "body": ["vr.init() -> int"],
        "description": "vr.init() -> int \n initializes VR mode. returns true if a hmd was found and initialized"
    },
    
    "vr.start_eye": {
        "scope": "lobster",
        "prefix": "vr.start_eye",
        "body": ["vr.start_eye(${1:isright}, ${2:znear}, ${3:zfar})"],
        "description": "vr.start_eye(isright:int, znear:float, zfar:float) \n starts rendering for an eye. call for each eye, followed by drawing the world as normal. replaces gl.perspective"
    },
    
    "vr.start": {
        "scope": "lobster",
        "prefix": "vr.start",
        "body": ["vr.start()"],
        "description": "vr.start() \n starts VR by updating hmd & controller poses"
    },
    
    "vr.finish": {
        "scope": "lobster",
        "prefix": "vr.finish",
        "body": ["vr.finish()"],
        "description": "vr.finish() \n finishes vr rendering by compositing (and distorting) both eye renders to the screen"
    },
    
    "vr.set_eye_texture": {
        "scope": "lobster",
        "prefix": "vr.set_eye_texture",
        "body": ["vr.set_eye_texture(${1:unit}, ${2:isright})"],
        "description": "vr.set_eye_texture(unit:int, isright:int) \n sets the texture for an eye (like gl.set_primitive_texture). call after vr.finish. can be used to render the non-VR display"
    },
    
    "vr.num_motion_controllers": {
        "scope": "lobster",
        "prefix": "vr.num_motion_controllers",
        "body": ["vr.num_motion_controllers() -> int"],
        "description": "vr.num_motion_controllers() -> int \n returns the number of motion controllers in the system"
    },
    
    "vr.motioncontrollerstracking": {
        "scope": "lobster",
        "prefix": "vr.motioncontrollerstracking",
        "body": ["vr.motioncontrollerstracking(${1:n})"],
        "description": "vr.motioncontrollerstracking(n:int) -> int \n returns if motion controller n is tracking"
    },
    
    "vr.motion_controller": {
        "scope": "lobster",
        "prefix": "vr.motion_controller",
        "body": ["vr.motion_controller(${1:n})"],
        "description": "vr.motion_controller(n:int) \n sets up the transform ready to render controller n. if there is no controller n (or it is currently not tracking) the identity transform is used"
    },
    
    "vr.create_motion_controller_mesh": {
        "scope": "lobster",
        "prefix": "vr.create_motion_controller_mesh",
        "body": ["vr.create_motion_controller_mesh(${1:n})"],
        "description": "vr.create_motion_controller_mesh(n:int) -> resource<mesh>? \n returns the mesh for motion controller n, or nil if not available"
    },
    
    "vr.motion_controller_button": {
        "scope": "lobster",
        "prefix": "vr.motion_controller_button",
        "body": ["vr.motion_controller_button(${1:n}, ${2:button})"],
        "description": "vr.motion_controller_button(n:int, button:string) -> int \n returns the button state for motion controller n. isdown: >= 1, wentdown: == 1, wentup: == 0, isup: <= 0. buttons are: system, menu, grip, trigger, touchpad"
    },
    
    "vr.motion_controller_vec": {
        "scope": "lobster",
        "prefix": "vr.motion_controller_vec",
        "body": ["vr.motion_controller_vec(${1:n}, ${2:i})"],
        "description": "vr.motion_controller_vec(n:int, i:int) -> float3 \n returns one of the vectors for motion controller n. 0 = left, 1 = up, 2 = fwd, 4 = pos. These are in Y up space."
    },
    
    "vr.hmd_vec": {
        "scope": "lobster",
        "prefix": "vr.hmd_vec",
        "body": ["vr.hmd_vec(${1:i})"],
        "description": "vr.hmd_vec(i:int) -> float3 \n returns one of the vectors for hmd pose. 0 = left, 1 = up, 2 = fwd, 4 = pos. These are in Y up space."
    },
    
    "steam.init": {
        "scope": "lobster",
        "prefix": "steam.init",
        "body": ["steam.init(${1:appid}, ${2:allowscreenshots}, ${3:initrelay})"],
        "description": "steam.init(appid:int, allowscreenshots:bool, initrelay:bool) -> int \n initializes SteamWorks. returns 1 if succesful, 0 on failure. Specify a non-0 appid if you want to restart from steam if this wasn't started from steam (the return value in this case will be -1 to indicate you should terminate this instance). If you don't specify an appid here or in steam_appid.txt, init will likely fail. The other functions can still be called even if steam isn't active. allowscreenshots automatically uploads screenshots to steam (triggered by steam). initrelay initializes the relay network for p2p early, to save time when it is first used."
    },
    
    "steam.shutdown": {
        "scope": "lobster",
        "prefix": "steam.shutdown",
        "body": ["steam.shutdown()"],
        "description": "steam.shutdown() \n "
    },
    
    "steam.overlay": {
        "scope": "lobster",
        "prefix": "steam.overlay",
        "body": ["steam.overlay() -> int"],
        "description": "steam.overlay() -> int \n returns true if the steam overlay is currently on (you may want to auto-pause if so)"
    },
    
    "steam.username": {
        "scope": "lobster",
        "prefix": "steam.username",
        "body": ["steam.username() -> string"],
        "description": "steam.username() -> string \n returns the name of the steam user, or empty string if not available."
    },
    
    "steam.unlock_achievement": {
        "scope": "lobster",
        "prefix": "steam.unlock_achievement",
        "body": ["steam.unlock_achievement(${1:achievementname})"],
        "description": "steam.unlock_achievement(achievementname:string) -> int \n Unlocks an achievement and shows the achievement overlay if not already achieved before. Will also Q-up saving achievement to Steam. Returns true if succesful."
    },
    
    "steam.write_file": {
        "scope": "lobster",
        "prefix": "steam.write_file",
        "body": ["steam.write_file(${1:file}, ${2:contents})"],
        "description": "steam.write_file(file:string, contents:string) -> int \n writes a file with the contents of a string to the steam cloud, or local storage if that fails, returns false if writing wasn't possible at all"
    },
    
    "steam.read_file": {
        "scope": "lobster",
        "prefix": "steam.read_file",
        "body": ["steam.read_file(${1:file})"],
        "description": "steam.read_file(file:string) -> string? \n returns the contents of a file as a string from the steam cloud if available, or otherwise from local storage, or nil if the file can't be found at all."
    },
    
    "steam.update": {
        "scope": "lobster",
        "prefix": "steam.update",
        "body": ["steam.update()"],
        "description": "steam.update() \n you must call this function in your game loop when using most steam APIs"
    },
    
    "steam.get_steam_id": {
        "scope": "lobster",
        "prefix": "steam.get_steam_id",
        "body": ["steam.get_steam_id() -> int"],
        "description": "steam.get_steam_id() -> int \n get the steam id of the current user"
    },
    
    "steam.friend_get_username": {
        "scope": "lobster",
        "prefix": "steam.friend_get_username",
        "body": ["steam.friend_get_username(${1:steam_id})"],
        "description": "steam.friend_get_username(steam_id:int) -> string \n returns the name for the given steam id; this only works for friends, or users in the same lobby, chat room, game server, etc."
    },
    
    "steam.net_identity": {
        "scope": "lobster",
        "prefix": "steam.net_identity",
        "body": ["steam.net_identity() -> string"],
        "description": "steam.net_identity() -> string \n returns the steam identity for this user. This same ID will be used for connecting to peers, sending messages, etc."
    },
    
    "steam.net_identity_from_steam_id": {
        "scope": "lobster",
        "prefix": "steam.net_identity_from_steam_id",
        "body": ["steam.net_identity_from_steam_id(${1:steam_id})"],
        "description": "steam.net_identity_from_steam_id(steam_id:int) -> string \n returns a network identity for the given steam id"
    },
    
    "steam.p2p_set_send_buffer_size": {
        "scope": "lobster",
        "prefix": "steam.p2p_set_send_buffer_size",
        "body": ["steam.p2p_set_send_buffer_size(${1:size})"],
        "description": "steam.p2p_set_send_buffer_size(size:int) -> int \n set the upper limit of pending bytes to be sent"
    },
    
    "steam.p2p_set_recv_buffer_size": {
        "scope": "lobster",
        "prefix": "steam.p2p_set_recv_buffer_size",
        "body": ["steam.p2p_set_recv_buffer_size(${1:size})"],
        "description": "steam.p2p_set_recv_buffer_size(size:int) \n upper limit on total size in bytes of received messages that will be buffered waiting to be processed by the application"
    },
    
    "steam.p2p_get_connection_status": {
        "scope": "lobster",
        "prefix": "steam.p2p_get_connection_status",
        "body": ["steam.p2p_get_connection_status(${1:ident})"],
        "description": "steam.p2p_get_connection_status(ident:string) -> int, float, float, float, float, float, float, int, int, int, int, int \n receive realtime connection status info. Returned values are: ping, local quality, remote quality, out packets/sec, out bytes/sec, in packets/sec, in bytes/sec, send rate bytes/sec, pending unreliable packets, pending reliable packets, sent unACKed reliable packets, and queue time in usec. See ISteamNetworkingSockets::GetConnectionRealTimeStatus() for more info."
    },
    
    "steam.p2p_listen": {
        "scope": "lobster",
        "prefix": "steam.p2p_listen",
        "body": ["steam.p2p_listen() -> int"],
        "description": "steam.p2p_listen() -> int \n open a listen socket to receive new connections"
    },
    
    "steam.p2p_close_listen": {
        "scope": "lobster",
        "prefix": "steam.p2p_close_listen",
        "body": ["steam.p2p_close_listen() -> int"],
        "description": "steam.p2p_close_listen() -> int \n close the listen socket and stop accepting new connections"
    },
    
    "steam.p2p_connect": {
        "scope": "lobster",
        "prefix": "steam.p2p_connect",
        "body": ["steam.p2p_connect(${1:ident})"],
        "description": "steam.p2p_connect(ident:string) -> int \n connect to a user with a given steam identity that has opened a listen socket"
    },
    
    "steam.p2p_close_connection": {
        "scope": "lobster",
        "prefix": "steam.p2p_close_connection",
        "body": ["steam.p2p_close_connection(${1:ident}, ${2:linger})"],
        "description": "steam.p2p_close_connection(ident:string, linger:bool) -> int \n close a connection opened with p2p_connect(); if linger is true then the connection will remain open for a short time to finish pending messages"
    },
    
    "steam.p2p_get_connections": {
        "scope": "lobster",
        "prefix": "steam.p2p_get_connections",
        "body": ["steam.p2p_get_connections() -> [string]"],
        "description": "steam.p2p_get_connections() -> [string] \n get a list of the steam identites that are currently connected"
    },
    
    "steam.p2p_send_message": {
        "scope": "lobster",
        "prefix": "steam.p2p_send_message",
        "body": ["steam.p2p_send_message(${1:ident}, ${2:data}, ${3:reliable})"],
        "description": "steam.p2p_send_message(ident:string, data:string, reliable:bool) -> int \n send a reliable message to a given steam identity"
    },
    
    "steam.p2p_broadcast_message": {
        "scope": "lobster",
        "prefix": "steam.p2p_broadcast_message",
        "body": ["steam.p2p_broadcast_message(${1:data}, ${2:reliable})"],
        "description": "steam.p2p_broadcast_message(data:string, reliable:bool) -> int \n send a reliable message to all connected peers"
    },
    
    "steam.p2p_receive_messages": {
        "scope": "lobster",
        "prefix": "steam.p2p_receive_messages",
        "body": ["steam.p2p_receive_messages() -> [string], [string]"],
        "description": "steam.p2p_receive_messages() -> [string], [string] \n receive messages from all connected peers. The first return value is an array of messages, the second return value is an array of the steam identities that sent each message"
    },
    
    "steam.lobby_create": {
        "scope": "lobster",
        "prefix": "steam.lobby_create",
        "body": ["steam.lobby_create(${1:max_members})"],
        "description": "steam.lobby_create(max_members:int) -> int \n create a new lobby that allows at most a given number of members; this lobby will be automatically joined. use lobby_get_created() to get the newly created lobby's steam id"
    },
    
    "steam.lobby_get_created": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_created",
        "body": ["steam.lobby_get_created() -> int"],
        "description": "steam.lobby_get_created() -> int \n get the steam id of the most recently created lobby"
    },
    
    "steam.lobby_join": {
        "scope": "lobster",
        "prefix": "steam.lobby_join",
        "body": ["steam.lobby_join(${1:steam_id})"],
        "description": "steam.lobby_join(steam_id:int) -> int \n join a lobby with the given steam id"
    },
    
    "steam.lobby_leave": {
        "scope": "lobster",
        "prefix": "steam.lobby_leave",
        "body": ["steam.lobby_leave(${1:steam_id})"],
        "description": "steam.lobby_leave(steam_id:int) -> int \n leave a lobby with the given steam id"
    },
    
    "steam.lobby_set_joinable": {
        "scope": "lobster",
        "prefix": "steam.lobby_set_joinable",
        "body": ["steam.lobby_set_joinable(${1:steam_id}, ${2:joinable})"],
        "description": "steam.lobby_set_joinable(steam_id:int, joinable:bool) -> int \n mark a lobby as joinable; only works if you are the owner"
    },
    
    "steam.lobby_get_joined": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_joined",
        "body": ["steam.lobby_get_joined() -> int"],
        "description": "steam.lobby_get_joined() -> int \n get a list of the most recent lobby joined with lobby_create() or lobby_join()"
    },
    
    "steam.lobby_get_all_joined": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_all_joined",
        "body": ["steam.lobby_get_all_joined() -> [int]"],
        "description": "steam.lobby_get_all_joined() -> [int] \n get a list of all of the lobbies that have been joined with lobby_create() or lobby_join()"
    },
    
    "steam.lobby_request_data": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_data",
        "body": ["steam.lobby_request_data(${1:steam_id})"],
        "description": "steam.lobby_request_data(steam_id:int) -> int \n refresh data for a given lobby; it is not necessary to call this for any lobby that you have joined"
    },
    
    "steam.lobby_get_data": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_data",
        "body": ["steam.lobby_get_data(${1:steam_id}, ${2:key})"],
        "description": "steam.lobby_get_data(steam_id:int, key:string) -> string \n get the matching value for a given key stored on this lobby; if the key has not been set then the result is an empty string"
    },
    
    "steam.lobby_get_all_data": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_all_data",
        "body": ["steam.lobby_get_all_data(${1:steam_id})"],
        "description": "steam.lobby_get_all_data(steam_id:int) -> [string], [string] \n get all key-value pairs stored on this lobby"
    },
    
    "steam.lobby_set_data": {
        "scope": "lobster",
        "prefix": "steam.lobby_set_data",
        "body": ["steam.lobby_set_data(${1:steam_id}, ${2:key}, ${3:value})"],
        "description": "steam.lobby_set_data(steam_id:int, key:string, value:string) -> int \n set a key-value pair for this lobby; only works if you are the owner"
    },
    
    "steam.lobby_delete_data": {
        "scope": "lobster",
        "prefix": "steam.lobby_delete_data",
        "body": ["steam.lobby_delete_data(${1:steam_id}, ${2:key})"],
        "description": "steam.lobby_delete_data(steam_id:int, key:string) -> int \n delete a key-value pair for this lobby; only works if you are the owner"
    },
    
    "steam.lobby_get_num_members": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_num_members",
        "body": ["steam.lobby_get_num_members(${1:steam_id})"],
        "description": "steam.lobby_get_num_members(steam_id:int) -> int \n get the number of members in this lobby"
    },
    
    "steam.lobby_get_members": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_members",
        "body": ["steam.lobby_get_members(${1:steam_id})"],
        "description": "steam.lobby_get_members(steam_id:int) -> [int] \n get the steam ids of all members in this lobby; only works if you have joined the lobby"
    },
    
    "steam.lobby_request_add_numerical_filter": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_add_numerical_filter",
        "body": ["steam.lobby_request_add_numerical_filter(${1:key}, ${2:value}, ${3:cmp})"],
        "description": "steam.lobby_request_add_numerical_filter(key:string, value:int, cmp:int) -> int \n add a numerical filter for the next lobby request"
    },
    
    "steam.lobby_request_add_string_filter": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_add_string_filter",
        "body": ["steam.lobby_request_add_string_filter(${1:key}, ${2:value}, ${3:cmp})"],
        "description": "steam.lobby_request_add_string_filter(key:string, value:string, cmp:int) -> int \n add a string filter for the next lobby request"
    },
    
    "steam.lobby_request_add_result_count_filter": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_add_result_count_filter",
        "body": ["steam.lobby_request_add_result_count_filter(${1:count})"],
        "description": "steam.lobby_request_add_result_count_filter(count:int) -> int \n add a result count limit for the next lobby request"
    },
    
    "steam.lobby_request_list": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_list",
        "body": ["steam.lobby_request_list() -> int"],
        "description": "steam.lobby_request_list() -> int \n request a list of lobbies that match the current set of filters; this function completes asynchronously, call lobby_request_is_ready() to determine when it is ready and lobby_request_get_lobbies() to get the results"
    },
    
    "steam.lobby_request_list_reset": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_list_reset",
        "body": ["steam.lobby_request_list_reset()"],
        "description": "steam.lobby_request_list_reset() \n clear the list of matched lobbies, so lobby_request_is_ready() returns false"
    },
    
    "steam.lobby_request_is_ready": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_is_ready",
        "body": ["steam.lobby_request_is_ready() -> int"],
        "description": "steam.lobby_request_is_ready() -> int \n returns true when a call to lobby_request_list() has finished"
    },
    
    "steam.lobby_request_get_lobbies": {
        "scope": "lobster",
        "prefix": "steam.lobby_request_get_lobbies",
        "body": ["steam.lobby_request_get_lobbies() -> [int]"],
        "description": "steam.lobby_request_get_lobbies() -> [int] \n returns the list of matched lobbies when lobby_request_list() has finished"
    },
    
    "steam.lobby_get_game_server": {
        "scope": "lobster",
        "prefix": "steam.lobby_get_game_server",
        "body": ["steam.lobby_get_game_server(${1:lobby_id})"],
        "description": "steam.lobby_get_game_server(lobby_id:int) -> int \n get the game server associated with this lobby"
    },
    
    "steam.lobby_set_game_server": {
        "scope": "lobster",
        "prefix": "steam.lobby_set_game_server",
        "body": ["steam.lobby_set_game_server(${1:lobby_id}, ${2:server_id})"],
        "description": "steam.lobby_set_game_server(lobby_id:int, server_id:int) -> int \n set the game server associated with this lobby; only works if you are the owner"
    },
    
    "im.init": {
        "scope": "lobster",
        "prefix": "im.init",
        "body": ["im.init(${1:dark_style}, ${2:flags}, ${3:rounding}, ${4:border})"],
        "description": "im.init(dark_style:bool = false, flags:int = 0, rounding:float = 0.000000, border:float = 0.000000) \n "
    },
    
    "im.add_font": {
        "scope": "lobster",
        "prefix": "im.add_font",
        "body": ["im.add_font(${1:font_path}, ${2:size})"],
        "description": "im.add_font(font_path:string, size:float) -> int \n "
    },
    
    "im.set_style_color": {
        "scope": "lobster",
        "prefix": "im.set_style_color",
        "body": ["im.set_style_color(${1:i}, ${2:color})"],
        "description": "im.set_style_color(i:int, color:float4) \n "
    },
    
    "im.set_style_spacing": {
        "scope": "lobster",
        "prefix": "im.set_style_spacing",
        "body": ["im.set_style_spacing(${1:spacing})"],
        "description": "im.set_style_spacing(spacing:float2) \n "
    },
    
    "im.set_style_inner_spacing": {
        "scope": "lobster",
        "prefix": "im.set_style_inner_spacing",
        "body": ["im.set_style_inner_spacing(${1:spacing})"],
        "description": "im.set_style_inner_spacing(spacing:float2) \n "
    },
    
    "im.set_style_window_padding": {
        "scope": "lobster",
        "prefix": "im.set_style_window_padding",
        "body": ["im.set_style_window_padding(${1:spacing})"],
        "description": "im.set_style_window_padding(spacing:float2) \n "
    },
    
    "im.set_style_frame_padding": {
        "scope": "lobster",
        "prefix": "im.set_style_frame_padding",
        "body": ["im.set_style_frame_padding(${1:spacing})"],
        "description": "im.set_style_frame_padding(spacing:float2) \n "
    },
    
    "im.frame_start": {
        "scope": "lobster",
        "prefix": "im.frame_start",
        "body": ["im.frame_start()"],
        "description": "im.frame_start() \n (use im.frame instead)"
    },
    
    "im.frame_end": {
        "scope": "lobster",
        "prefix": "im.frame_end",
        "body": ["im.frame_end()"],
        "description": "im.frame_end() \n "
    },
    
    "im.dockspace_over_viewport": {
        "scope": "lobster",
        "prefix": "im.dockspace_over_viewport",
        "body": ["im.dockspace_over_viewport()"],
        "description": "im.dockspace_over_viewport() \n "
    },
    
    "im.window_demo": {
        "scope": "lobster",
        "prefix": "im.window_demo",
        "body": ["im.window_demo() -> int"],
        "description": "im.window_demo() -> int \n "
    },
    
    "im.window_start": {
        "scope": "lobster",
        "prefix": "im.window_start",
        "body": ["im.window_start(${1:title}, ${2:flags}, ${3:dock})"],
        "description": "im.window_start(title:string, flags:int, dock:int) \n (use im.window instead)"
    },
    
    "im.window_end": {
        "scope": "lobster",
        "prefix": "im.window_end",
        "body": ["im.window_end()"],
        "description": "im.window_end() \n "
    },
    
    "im.next_window_size": {
        "scope": "lobster",
        "prefix": "im.next_window_size",
        "body": ["im.next_window_size(${1:size})"],
        "description": "im.next_window_size(size:float2) \n size in pixels"
    },
    
    "im.next_window_size": {
        "scope": "lobster",
        "prefix": "im.next_window_size",
        "body": ["im.next_window_size(${1:size}, ${2:cond})"],
        "description": "im.next_window_size(size:float2, cond:int) \n size in pixels"
    },
    
    "im.next_window_pos": {
        "scope": "lobster",
        "prefix": "im.next_window_pos",
        "body": ["im.next_window_pos(${1:pos}, ${2:pivot})"],
        "description": "im.next_window_pos(pos:float2, pivot:float2) \n pos in pixels, pivot values 0..1 relative to pos"
    },
    
    "im.next_window_pos": {
        "scope": "lobster",
        "prefix": "im.next_window_pos",
        "body": ["im.next_window_pos(${1:pos}, ${2:pivot}, ${3:cond})"],
        "description": "im.next_window_pos(pos:float2, pivot:float2, cond:int) \n pos in pixels, pivot values 0..1 relative to pos"
    },
    
    "im.button": {
        "scope": "lobster",
        "prefix": "im.button",
        "body": ["im.button(${1:label}, ${2:size})"],
        "description": "im.button(label:string, size:float2 = nil) -> int \n "
    },
    
    "im.selectable": {
        "scope": "lobster",
        "prefix": "im.selectable",
        "body": ["im.selectable(${1:label}, ${2:selected})"],
        "description": "im.selectable(label:string, selected:bool = false) -> int \n "
    },
    
    "im.same_line": {
        "scope": "lobster",
        "prefix": "im.same_line",
        "body": ["im.same_line()"],
        "description": "im.same_line() \n "
    },
    
    "im.new_line": {
        "scope": "lobster",
        "prefix": "im.new_line",
        "body": ["im.new_line()"],
        "description": "im.new_line() \n "
    },
    
    "im.separator": {
        "scope": "lobster",
        "prefix": "im.separator",
        "body": ["im.separator()"],
        "description": "im.separator() \n "
    },
    
    "im.is_item_deactivated_after_edit": {
        "scope": "lobster",
        "prefix": "im.is_item_deactivated_after_edit",
        "body": ["im.is_item_deactivated_after_edit() -> int"],
        "description": "im.is_item_deactivated_after_edit() -> int \n returns true if the last item was made inactive and made a value change when it was active"
    },
    
    "im.get_layout_pos": {
        "scope": "lobster",
        "prefix": "im.get_layout_pos",
        "body": ["im.get_layout_pos() -> float2"],
        "description": "im.get_layout_pos() -> float2 \n "
    },
    
    "im.set_layout_pos": {
        "scope": "lobster",
        "prefix": "im.set_layout_pos",
        "body": ["im.set_layout_pos(${1:pos})"],
        "description": "im.set_layout_pos(pos:float2) \n "
    },
    
    "im.get_content_region_avail": {
        "scope": "lobster",
        "prefix": "im.get_content_region_avail",
        "body": ["im.get_content_region_avail() -> float2"],
        "description": "im.get_content_region_avail() -> float2 \n returns the amount of space left in the current region from the cursor pos"
    },
    
    "im.calc_text_size": {
        "scope": "lobster",
        "prefix": "im.calc_text_size",
        "body": ["im.calc_text_size(${1:text})"],
        "description": "im.calc_text_size(text:string) -> float2 \n returns the amount of space used by the given text in the current font"
    },
    
    "im.mouse_clicked": {
        "scope": "lobster",
        "prefix": "im.mouse_clicked",
        "body": ["im.mouse_clicked(${1:button})"],
        "description": "im.mouse_clicked(button:int) -> int \n returns whether the given mouse button was clicked anywhere"
    },
    
    "im.text": {
        "scope": "lobster",
        "prefix": "im.text",
        "body": ["im.text(${1:label})"],
        "description": "im.text(label:string) \n "
    },
    
    "im.text_wrapped": {
        "scope": "lobster",
        "prefix": "im.text_wrapped",
        "body": ["im.text_wrapped(${1:label})"],
        "description": "im.text_wrapped(label:string) \n "
    },
    
    "im.font_start": {
        "scope": "lobster",
        "prefix": "im.font_start",
        "body": ["im.font_start(${1:font_idx})"],
        "description": "im.font_start(font_idx:int) \n (use im.font instead)"
    },
    
    "im.font_end": {
        "scope": "lobster",
        "prefix": "im.font_end",
        "body": ["im.font_end()"],
        "description": "im.font_end() \n "
    },
    
    "im.color_start": {
        "scope": "lobster",
        "prefix": "im.color_start",
        "body": ["im.color_start(${1:color})"],
        "description": "im.color_start(color:float4) \n (use im.tooltip_multi instead)"
    },
    
    "im.color_end": {
        "scope": "lobster",
        "prefix": "im.color_end",
        "body": ["im.color_end()"],
        "description": "im.color_end() \n "
    },
    
    "im.tooltip": {
        "scope": "lobster",
        "prefix": "im.tooltip",
        "body": ["im.tooltip(${1:label})"],
        "description": "im.tooltip(label:string) \n "
    },
    
    "im.tooltip_multi_start": {
        "scope": "lobster",
        "prefix": "im.tooltip_multi_start",
        "body": ["im.tooltip_multi_start() -> int"],
        "description": "im.tooltip_multi_start() -> int \n (use im.tooltip_multi instead)"
    },
    
    "im.tooltip_multi_end": {
        "scope": "lobster",
        "prefix": "im.tooltip_multi_end",
        "body": ["im.tooltip_multi_end()"],
        "description": "im.tooltip_multi_end() \n "
    },
    
    "im.checkbox": {
        "scope": "lobster",
        "prefix": "im.checkbox",
        "body": ["im.checkbox(${1:label}, ${2:bool})"],
        "description": "im.checkbox(label:string, bool:int) -> int \n "
    },
    
    "im.input_text": {
        "scope": "lobster",
        "prefix": "im.input_text",
        "body": ["im.input_text(${1:label}, ${2:str})"],
        "description": "im.input_text(label:string, str:string) -> string \n "
    },
    
    "im.input_text_multi_line": {
        "scope": "lobster",
        "prefix": "im.input_text_multi_line",
        "body": ["im.input_text_multi_line(${1:label}, ${2:str}, ${3:num_lines})"],
        "description": "im.input_text_multi_line(label:string, str:string, num_lines:int) -> string \n "
    },
    
    "im.input_int": {
        "scope": "lobster",
        "prefix": "im.input_int",
        "body": ["im.input_int(${1:label}, ${2:val}, ${3:min}, ${4:max})"],
        "description": "im.input_int(label:string, val:int, min:int, max:int) -> int \n "
    },
    
    "im.input_float": {
        "scope": "lobster",
        "prefix": "im.input_float",
        "body": ["im.input_float(${1:label}, ${2:val})"],
        "description": "im.input_float(label:string, val:float) -> float \n "
    },
    
    "im.radio": {
        "scope": "lobster",
        "prefix": "im.radio",
        "body": ["im.radio(${1:labels}, ${2:active}, ${3:horiz})"],
        "description": "im.radio(labels:[string], active:int, horiz:int) -> int \n active to select which one is activated, -2 for last frame's selection or 0"
    },
    
    "im.progress_bar": {
        "scope": "lobster",
        "prefix": "im.progress_bar",
        "body": ["im.progress_bar(${1:fraction}, ${2:size}, ${3:overlay})"],
        "description": "im.progress_bar(fraction:float, size:float2, overlay:string) \n display progress bar filled up to the given fraction. size.x < 0 to use all available space,  size.x > 0 for a specific pixel width"
    },
    
    "im.combo": {
        "scope": "lobster",
        "prefix": "im.combo",
        "body": ["im.combo(${1:label}, ${2:labels}, ${3:active})"],
        "description": "im.combo(label:string, labels:[string], active:int) -> int \n active to select which one is activated, -2 for last frame's selection or 0"
    },
    
    "im.listbox": {
        "scope": "lobster",
        "prefix": "im.listbox",
        "body": ["im.listbox(${1:label}, ${2:labels}, ${3:active}, ${4:height})"],
        "description": "im.listbox(label:string, labels:[string], active:int, height:int) -> int \n active to select which one is activated, -1 for no initial selection, -2 for last frame's selection or none"
    },
    
    "im.sliderint": {
        "scope": "lobster",
        "prefix": "im.sliderint",
        "body": ["im.sliderint(${1:label}, ${2:i}, ${3:min}, ${4:max})"],
        "description": "im.sliderint(label:string, i:int, min:int, max:int) -> int \n "
    },
    
    "im.sliderfloat": {
        "scope": "lobster",
        "prefix": "im.sliderfloat",
        "body": ["im.sliderfloat(${1:label}, ${2:f}, ${3:min}, ${4:max})"],
        "description": "im.sliderfloat(label:string, f:float, min:float, max:float) -> float \n "
    },
    
    "im.sliderint2": {
        "scope": "lobster",
        "prefix": "im.sliderint2",
        "body": ["im.sliderint2(${1:label}, ${2:I2}, ${3:min}, ${4:max})"],
        "description": "im.sliderint2(label:string, I2:int2, min:int, max:int) -> int2 \n "
    },
    
    "im.sliderint3": {
        "scope": "lobster",
        "prefix": "im.sliderint3",
        "body": ["im.sliderint3(${1:label}, ${2:I3}, ${3:min}, ${4:max})"],
        "description": "im.sliderint3(label:string, I3:int3, min:int, max:int) -> int3 \n "
    },
    
    "im.sliderint4": {
        "scope": "lobster",
        "prefix": "im.sliderint4",
        "body": ["im.sliderint4(${1:label}, ${2:I4}, ${3:min}, ${4:max})"],
        "description": "im.sliderint4(label:string, I4:int4, min:int, max:int) -> int4 \n "
    },
    
    "im.sliderfloat2": {
        "scope": "lobster",
        "prefix": "im.sliderfloat2",
        "body": ["im.sliderfloat2(${1:label}, ${2:F2}, ${3:min}, ${4:max})"],
        "description": "im.sliderfloat2(label:string, F2:float2, min:float, max:float) -> float2 \n "
    },
    
    "im.sliderfloat3": {
        "scope": "lobster",
        "prefix": "im.sliderfloat3",
        "body": ["im.sliderfloat3(${1:label}, ${2:F3}, ${3:min}, ${4:max})"],
        "description": "im.sliderfloat3(label:string, F3:float3, min:float, max:float) -> float3 \n "
    },
    
    "im.sliderfloat4": {
        "scope": "lobster",
        "prefix": "im.sliderfloat4",
        "body": ["im.sliderfloat4(${1:label}, ${2:F4}, ${3:min}, ${4:max})"],
        "description": "im.sliderfloat4(label:string, F4:float4, min:float, max:float) -> float4 \n "
    },
    
    "im.coloredit": {
        "scope": "lobster",
        "prefix": "im.coloredit",
        "body": ["im.coloredit(${1:label}, ${2:color})"],
        "description": "im.coloredit(label:string, color:vec_f) -> any \n "
    },
    
    "im.image": {
        "scope": "lobster",
        "prefix": "im.image",
        "body": ["im.image(${1:tex}, ${2:size}, ${3:flip})"],
        "description": "im.image(tex:resource<texture>, size:float2, flip:bool = false) \n "
    },
    
    "im.image_button": {
        "scope": "lobster",
        "prefix": "im.image_button",
        "body": ["im.image_button(${1:label}, ${2:tex}, ${3:size}, ${4:bgcol}, ${5:flip})"],
        "description": "im.image_button(label:string, tex:resource<texture>, size:float2, bgcol:float4 = nil, flip:bool = false) -> int \n "
    },
    
    "im.image_mouseclick": {
        "scope": "lobster",
        "prefix": "im.image_mouseclick",
        "body": ["im.image_mouseclick(${1:tex}, ${2:size})"],
        "description": "im.image_mouseclick(tex:resource<texture>, size:float2) -> float2, int \n "
    },
    
    "im.treenode_start": {
        "scope": "lobster",
        "prefix": "im.treenode_start",
        "body": ["im.treenode_start(${1:label}, ${2:flags})"],
        "description": "im.treenode_start(label:string, flags:int) -> int \n (use im.treenode instead)"
    },
    
    "im.treenode_end": {
        "scope": "lobster",
        "prefix": "im.treenode_end",
        "body": ["im.treenode_end()"],
        "description": "im.treenode_end() \n "
    },
    
    "im.tab_bar_start": {
        "scope": "lobster",
        "prefix": "im.tab_bar_start",
        "body": ["im.tab_bar_start(${1:label})"],
        "description": "im.tab_bar_start(label:string) -> int \n (use im.tab_bar instead)"
    },
    
    "im.tab_bar_end": {
        "scope": "lobster",
        "prefix": "im.tab_bar_end",
        "body": ["im.tab_bar_end()"],
        "description": "im.tab_bar_end() \n "
    },
    
    "im.tab_start": {
        "scope": "lobster",
        "prefix": "im.tab_start",
        "body": ["im.tab_start(${1:label}, ${2:flags})"],
        "description": "im.tab_start(label:string, flags:int) -> int \n (use im.tab instead)"
    },
    
    "im.tab_end": {
        "scope": "lobster",
        "prefix": "im.tab_end",
        "body": ["im.tab_end()"],
        "description": "im.tab_end() \n "
    },
    
    "im.menu_bar_start": {
        "scope": "lobster",
        "prefix": "im.menu_bar_start",
        "body": ["im.menu_bar_start(${1:main})"],
        "description": "im.menu_bar_start(main:bool) -> int \n (use im.menu_bar instead)"
    },
    
    "im.menu_bar_end": {
        "scope": "lobster",
        "prefix": "im.menu_bar_end",
        "body": ["im.menu_bar_end(${1:main})"],
        "description": "im.menu_bar_end(main:bool) \n "
    },
    
    "im.menu_start": {
        "scope": "lobster",
        "prefix": "im.menu_start",
        "body": ["im.menu_start(${1:label}, ${2:disabled})"],
        "description": "im.menu_start(label:string, disabled:bool = false) -> int \n (use im.menu instead)"
    },
    
    "im.menu_end": {
        "scope": "lobster",
        "prefix": "im.menu_end",
        "body": ["im.menu_end()"],
        "description": "im.menu_end() \n "
    },
    
    "im.menu_item": {
        "scope": "lobster",
        "prefix": "im.menu_item",
        "body": ["im.menu_item(${1:label}, ${2:shortcut}, ${3:disabled})"],
        "description": "im.menu_item(label:string, shortcut:string = nil, disabled:bool = false) -> int \n "
    },
    
    "im.menu_item_toggle": {
        "scope": "lobster",
        "prefix": "im.menu_item_toggle",
        "body": ["im.menu_item_toggle(${1:label}, ${2:selected}, ${3:disabled})"],
        "description": "im.menu_item_toggle(label:string, selected:bool = false, disabled:bool = false) -> int \n "
    },
    
    "im.id_start": {
        "scope": "lobster",
        "prefix": "im.id_start",
        "body": ["im.id_start(${1:label})"],
        "description": "im.id_start(label:string) \n an invisble group around some widgets, useful to ensure these widgets are unique (if they have the same label as widgets in another group that has a different group label). Use im.id instead"
    },
    
    "im.id_end": {
        "scope": "lobster",
        "prefix": "im.id_end",
        "body": ["im.id_end()"],
        "description": "im.id_end() \n "
    },
    
    "im.child_start": {
        "scope": "lobster",
        "prefix": "im.child_start",
        "body": ["im.child_start(${1:title}, ${2:size}, ${3:flags})"],
        "description": "im.child_start(title:string, size:float2, flags:int) \n create a self-contained scrolling/clipping region with a window. use im.child instead"
    },
    
    "im.child_end": {
        "scope": "lobster",
        "prefix": "im.child_end",
        "body": ["im.child_end()"],
        "description": "im.child_end() \n "
    },
    
    "im.group_start": {
        "scope": "lobster",
        "prefix": "im.group_start",
        "body": ["im.group_start()"],
        "description": "im.group_start() \n lock the horizontal starting position, and capture all contained widgets into one item. Use im.group instead"
    },
    
    "im.group_end": {
        "scope": "lobster",
        "prefix": "im.group_end",
        "body": ["im.group_end()"],
        "description": "im.group_end() \n "
    },
    
    "im.popup_start": {
        "scope": "lobster",
        "prefix": "im.popup_start",
        "body": ["im.popup_start(${1:label}, ${2:winflags}, ${3:rmbprevitem})"],
        "description": "im.popup_start(label:string, winflags:int, rmbprevitem:bool = false) -> int \n (use im.popup instead)"
    },
    
    "im.popup_end": {
        "scope": "lobster",
        "prefix": "im.popup_end",
        "body": ["im.popup_end()"],
        "description": "im.popup_end() \n "
    },
    
    "im.popup_open": {
        "scope": "lobster",
        "prefix": "im.popup_open",
        "body": ["im.popup_open(${1:label})"],
        "description": "im.popup_open(label:string) \n "
    },
    
    "im.close_current_popup": {
        "scope": "lobster",
        "prefix": "im.close_current_popup",
        "body": ["im.close_current_popup()"],
        "description": "im.close_current_popup() \n "
    },
    
    "im.disabled_start": {
        "scope": "lobster",
        "prefix": "im.disabled_start",
        "body": ["im.disabled_start(${1:disabled})"],
        "description": "im.disabled_start(disabled:bool) \n (use im.disabled instead)"
    },
    
    "im.disabled_end": {
        "scope": "lobster",
        "prefix": "im.disabled_end",
        "body": ["im.disabled_end()"],
        "description": "im.disabled_end() \n "
    },
    
    "im.button_repeat_start": {
        "scope": "lobster",
        "prefix": "im.button_repeat_start",
        "body": ["im.button_repeat_start(${1:repeat})"],
        "description": "im.button_repeat_start(repeat:bool) \n (use im.button_repeat instead)"
    },
    
    "im.button_repeat_end": {
        "scope": "lobster",
        "prefix": "im.button_repeat_end",
        "body": ["im.button_repeat_end()"],
        "description": "im.button_repeat_end() \n "
    },
    
    "im.drag_drop_source_start": {
        "scope": "lobster",
        "prefix": "im.drag_drop_source_start",
        "body": ["im.drag_drop_source_start(${1:flags})"],
        "description": "im.drag_drop_source_start(flags:int) -> int \n (use im.drag_drop_source instead)"
    },
    
    "im.drag_drop_source_end": {
        "scope": "lobster",
        "prefix": "im.drag_drop_source_end",
        "body": ["im.drag_drop_source_end()"],
        "description": "im.drag_drop_source_end() \n "
    },
    
    "im.set_drag_drop_payload": {
        "scope": "lobster",
        "prefix": "im.set_drag_drop_payload",
        "body": ["im.set_drag_drop_payload(${1:type}, ${2:data})"],
        "description": "im.set_drag_drop_payload(type:string, data:string) \n "
    },
    
    "im.drag_drop_target_start": {
        "scope": "lobster",
        "prefix": "im.drag_drop_target_start",
        "body": ["im.drag_drop_target_start() -> int"],
        "description": "im.drag_drop_target_start() -> int \n (use im.drag_drop_target instead)"
    },
    
    "im.drag_drop_target_end": {
        "scope": "lobster",
        "prefix": "im.drag_drop_target_end",
        "body": ["im.drag_drop_target_end()"],
        "description": "im.drag_drop_target_end() \n "
    },
    
    "im.accept_drag_drop_payload": {
        "scope": "lobster",
        "prefix": "im.accept_drag_drop_payload",
        "body": ["im.accept_drag_drop_payload(${1:type}, ${2:flags})"],
        "description": "im.accept_drag_drop_payload(type:string, flags:int) -> string? \n "
    },
    
    "im.width_start": {
        "scope": "lobster",
        "prefix": "im.width_start",
        "body": ["im.width_start(${1:width})"],
        "description": "im.width_start(width:float) \n Sets the width of an item: 0 = default, -1 = use full width without label, any other value is custom width. Use im.width instead"
    },
    
    "im.width_end": {
        "scope": "lobster",
        "prefix": "im.width_end",
        "body": ["im.width_end()"],
        "description": "im.width_end() \n "
    },
    
    "im.text_table": {
        "scope": "lobster",
        "prefix": "im.text_table",
        "body": ["im.text_table(${1:id}, ${2:num_colums}, ${3:labels})"],
        "description": "im.text_table(id:string, num_colums:int, labels:[string]) \n "
    },
    
    "im.edit_anything": {
        "scope": "lobster",
        "prefix": "im.edit_anything",
        "body": ["im.edit_anything(value, ${1:label})"],
        "description": "im.edit_anything(value, label:string = nil) -> any \n creates a UI for any lobster reference value, and returns the edited version"
    },
    
    "im.graph": {
        "scope": "lobster",
        "prefix": "im.graph",
        "body": ["im.graph(${1:label}, ${2:values}, ${3:ishistogram})"],
        "description": "im.graph(label:string, values:[float], ishistogram:int) \n "
    },
    
    "im.show_flexbuffer": {
        "scope": "lobster",
        "prefix": "im.show_flexbuffer",
        "body": ["im.show_flexbuffer(${1:value})"],
        "description": "im.show_flexbuffer(value:string) \n "
    },
    
    "im.show_vars": {
        "scope": "lobster",
        "prefix": "im.show_vars",
        "body": ["im.show_vars()"],
        "description": "im.show_vars() \n shows an automatic editing UI for each global variable in your program"
    },
    
    "im.show_engine_stats": {
        "scope": "lobster",
        "prefix": "im.show_engine_stats",
        "body": ["im.show_engine_stats()"],
        "description": "im.show_engine_stats() \n "
    },
    
    "breakpoint": {
        "scope": "lobster",
        "prefix": "breakpoint",
        "body": ["breakpoint(${1:condition})"],
        "description": "breakpoint(condition:int) \n stops the program in the debugger if passed true. debugger needs --runtime-stack-trace on, and im.init() to have run."
    },
    
    "breakpoint": {
        "scope": "lobster",
        "prefix": "breakpoint",
        "body": ["breakpoint()"],
        "description": "breakpoint() \n stops the program in the debugger always. debugger needs --runtime-stack-trace on, and im.init() to have run."
    },
    
}